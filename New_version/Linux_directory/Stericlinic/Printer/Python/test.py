#!/usr/bin/python
#
# Sudoku Generator and Solver in 250 lines of python
# Copyright (c) 2006 David Bau.  All rights reserved.
#
# Can be used as either a command-line tool or as a cgi script.
#
# As a cgi-script, generates puzzles and estimates their level of
# difficulty.  Uses files sudoku-template.pdf/.ps/.txt/.html
# in which it can fill in 81 underscores with digits for a puzzle.
# The suffix of the request URL determines which template is used.
#
# On a command line without any arguments, prints text for a
# random sudoku puzzle, with an estimate of its difficulty.
# On a command line with a filename, solves the given puzzles
# (files should look like the text generated by the generator).
#
# Adapted for Adafruit_Thermal library by Phil Burgess for Adafruit
# Industries.  This version uses bitmaps (in the 'gfx' subdirectory)
# to render the puzzle rather than text symbols.  See sudoku-txt
# for a different Sudoku example that's all text-based.

from Adafruit_Thermal import *
import SteriLogo as logo
from subprocess import call


printer = Adafruit_Thermal("/dev/ttyS1", 19200, timeout=5)


# Test inverse on & off
printer.inverseOn()

printer.inverseOff()

call(["echo"," 1 >> /dev/ttyS1"])


def main():
    printer.printBitmap(logo.width, logo.height, logo.data)
    # Test more styles
    printer.justify('L')
    printer.boldOn()
    printer.println("STERICLINIC SAS")
    printer.println("TEL: (7) 697 8382")
    printer.println("CEL: 316-690-5792/300-501-7773")
    printer.println("www.stericlinic.com")
    printer.println("LH LINEAS HOSPITALARIAS")
    printer.println("www.lineashospitalarias.com")
    printer.println("TEL:697 2333 Ext: 7319")
    printer.boldOff()
    printer.feed(4)

if __name__ == '__main__':
  main()

