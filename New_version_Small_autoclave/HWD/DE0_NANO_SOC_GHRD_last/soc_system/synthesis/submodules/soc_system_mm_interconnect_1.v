// soc_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_1 (
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire        clk_0_clk_clk,                                                       //                                                     clk_0_clk.clk
		input  wire        hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        sysid_qsys_reset_reset_bridge_in_reset_reset,                        //                        sysid_qsys_reset_reset_bridge_in_reset.reset
		output wire [1:0]  ADC_input_data_s1_address,                                           //                                             ADC_input_data_s1.address
		input  wire [31:0] ADC_input_data_s1_readdata,                                          //                                                              .readdata
		output wire [1:0]  ADC_sel_channel_s1_address,                                          //                                            ADC_sel_channel_s1.address
		output wire        ADC_sel_channel_s1_write,                                            //                                                              .write
		input  wire [31:0] ADC_sel_channel_s1_readdata,                                         //                                                              .readdata
		output wire [31:0] ADC_sel_channel_s1_writedata,                                        //                                                              .writedata
		output wire        ADC_sel_channel_s1_chipselect,                                       //                                                              .chipselect
		output wire [1:0]  Alarm_div_32_s1_address,                                             //                                               Alarm_div_32_s1.address
		output wire        Alarm_div_32_s1_write,                                               //                                                              .write
		input  wire [31:0] Alarm_div_32_s1_readdata,                                            //                                                              .readdata
		output wire [31:0] Alarm_div_32_s1_writedata,                                           //                                                              .writedata
		output wire        Alarm_div_32_s1_chipselect,                                          //                                                              .chipselect
		output wire [1:0]  button_pio_s1_address,                                               //                                                 button_pio_s1.address
		output wire        button_pio_s1_write,                                                 //                                                              .write
		input  wire [31:0] button_pio_s1_readdata,                                              //                                                              .readdata
		output wire [31:0] button_pio_s1_writedata,                                             //                                                              .writedata
		output wire        button_pio_s1_chipselect,                                            //                                                              .chipselect
		output wire [1:0]  Buttons_Inicio_Emer_Final_control_s1_address,                        //                          Buttons_Inicio_Emer_Final_control_s1.address
		input  wire [31:0] Buttons_Inicio_Emer_Final_control_s1_readdata,                       //                                                              .readdata
		output wire [1:0]  dipsw_pio_s1_address,                                                //                                                  dipsw_pio_s1.address
		output wire        dipsw_pio_s1_write,                                                  //                                                              .write
		input  wire [31:0] dipsw_pio_s1_readdata,                                               //                                                              .readdata
		output wire [31:0] dipsw_pio_s1_writedata,                                              //                                                              .writedata
		output wire        dipsw_pio_s1_chipselect,                                             //                                                              .chipselect
		output wire [1:0]  Electro_control_s1_address,                                          //                                            Electro_control_s1.address
		input  wire [31:0] Electro_control_s1_readdata,                                         //                                                              .readdata
		output wire [1:0]  led_pio_s1_address,                                                  //                                                    led_pio_s1.address
		output wire        led_pio_s1_write,                                                    //                                                              .write
		input  wire [31:0] led_pio_s1_readdata,                                                 //                                                              .readdata
		output wire [31:0] led_pio_s1_writedata,                                                //                                                              .writedata
		output wire        led_pio_s1_chipselect,                                               //                                                              .chipselect
		output wire [1:0]  Max6675_Temp_s1_address,                                             //                                               Max6675_Temp_s1.address
		input  wire [31:0] Max6675_Temp_s1_readdata,                                            //                                                              .readdata
		output wire [1:0]  Mosfet_control_s1_address,                                           //                                             Mosfet_control_s1.address
		output wire        Mosfet_control_s1_write,                                             //                                                              .write
		input  wire [31:0] Mosfet_control_s1_readdata,                                          //                                                              .readdata
		output wire [31:0] Mosfet_control_s1_writedata,                                         //                                                              .writedata
		output wire        Mosfet_control_s1_chipselect,                                        //                                                              .chipselect
		output wire [1:0]  Mosfet_en_s1_address,                                                //                                                  Mosfet_en_s1.address
		output wire        Mosfet_en_s1_write,                                                  //                                                              .write
		input  wire [31:0] Mosfet_en_s1_readdata,                                               //                                                              .readdata
		output wire [31:0] Mosfet_en_s1_writedata,                                              //                                                              .writedata
		output wire        Mosfet_en_s1_chipselect,                                             //                                                              .chipselect
		output wire [1:0]  Sel_Max667_s1_address,                                               //                                                 Sel_Max667_s1.address
		output wire        Sel_Max667_s1_write,                                                 //                                                              .write
		input  wire [31:0] Sel_Max667_s1_readdata,                                              //                                                              .readdata
		output wire [31:0] Sel_Max667_s1_writedata,                                             //                                                              .writedata
		output wire        Sel_Max667_s1_chipselect,                                            //                                                              .chipselect
		output wire [0:0]  sysid_qsys_control_slave_address,                                    //                                      sysid_qsys_control_slave.address
		input  wire [31:0] sysid_qsys_control_slave_readdata,                                   //                                                              .readdata
		output wire [1:0]  Valves_control_s1_address,                                           //                                             Valves_control_s1.address
		output wire        Valves_control_s1_write,                                             //                                                              .write
		input  wire [31:0] Valves_control_s1_readdata,                                          //                                                              .readdata
		output wire [31:0] Valves_control_s1_writedata,                                         //                                                              .writedata
		output wire        Valves_control_s1_chipselect                                         //                                                              .chipselect
	);

	wire   [31:0] sysid_qsys_control_slave_agent_m0_readdata;                               // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire          sysid_qsys_control_slave_agent_m0_waitrequest;                            // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_control_slave_agent_m0_debugaccess;                            // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [20:0] sysid_qsys_control_slave_agent_m0_address;                                // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                             // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_agent_m0_read;                                   // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire          sysid_qsys_control_slave_agent_m0_readdatavalid;                          // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_agent_m0_lock;                                   // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_control_slave_agent_m0_writedata;                              // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire          sysid_qsys_control_slave_agent_m0_write;                                  // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                             // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire          sysid_qsys_control_slave_agent_rf_source_valid;                           // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [118:0] sysid_qsys_control_slave_agent_rf_source_data;                            // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rf_source_ready;                           // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire          sysid_qsys_control_slave_agent_rf_source_startofpacket;                   // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_control_slave_agent_rf_source_endofpacket;                     // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                        // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [118:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                         // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                        // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                  // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                      // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                       // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_control_slave_agent_rdata_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                      // sysid_qsys_control_slave_agent_rdata_fifo:in_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] led_pio_s1_agent_m0_readdata;                                             // led_pio_s1_translator:uav_readdata -> led_pio_s1_agent:m0_readdata
	wire          led_pio_s1_agent_m0_waitrequest;                                          // led_pio_s1_translator:uav_waitrequest -> led_pio_s1_agent:m0_waitrequest
	wire          led_pio_s1_agent_m0_debugaccess;                                          // led_pio_s1_agent:m0_debugaccess -> led_pio_s1_translator:uav_debugaccess
	wire   [20:0] led_pio_s1_agent_m0_address;                                              // led_pio_s1_agent:m0_address -> led_pio_s1_translator:uav_address
	wire    [3:0] led_pio_s1_agent_m0_byteenable;                                           // led_pio_s1_agent:m0_byteenable -> led_pio_s1_translator:uav_byteenable
	wire          led_pio_s1_agent_m0_read;                                                 // led_pio_s1_agent:m0_read -> led_pio_s1_translator:uav_read
	wire          led_pio_s1_agent_m0_readdatavalid;                                        // led_pio_s1_translator:uav_readdatavalid -> led_pio_s1_agent:m0_readdatavalid
	wire          led_pio_s1_agent_m0_lock;                                                 // led_pio_s1_agent:m0_lock -> led_pio_s1_translator:uav_lock
	wire   [31:0] led_pio_s1_agent_m0_writedata;                                            // led_pio_s1_agent:m0_writedata -> led_pio_s1_translator:uav_writedata
	wire          led_pio_s1_agent_m0_write;                                                // led_pio_s1_agent:m0_write -> led_pio_s1_translator:uav_write
	wire    [2:0] led_pio_s1_agent_m0_burstcount;                                           // led_pio_s1_agent:m0_burstcount -> led_pio_s1_translator:uav_burstcount
	wire          led_pio_s1_agent_rf_source_valid;                                         // led_pio_s1_agent:rf_source_valid -> led_pio_s1_agent_rsp_fifo:in_valid
	wire  [118:0] led_pio_s1_agent_rf_source_data;                                          // led_pio_s1_agent:rf_source_data -> led_pio_s1_agent_rsp_fifo:in_data
	wire          led_pio_s1_agent_rf_source_ready;                                         // led_pio_s1_agent_rsp_fifo:in_ready -> led_pio_s1_agent:rf_source_ready
	wire          led_pio_s1_agent_rf_source_startofpacket;                                 // led_pio_s1_agent:rf_source_startofpacket -> led_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          led_pio_s1_agent_rf_source_endofpacket;                                   // led_pio_s1_agent:rf_source_endofpacket -> led_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          led_pio_s1_agent_rsp_fifo_out_valid;                                      // led_pio_s1_agent_rsp_fifo:out_valid -> led_pio_s1_agent:rf_sink_valid
	wire  [118:0] led_pio_s1_agent_rsp_fifo_out_data;                                       // led_pio_s1_agent_rsp_fifo:out_data -> led_pio_s1_agent:rf_sink_data
	wire          led_pio_s1_agent_rsp_fifo_out_ready;                                      // led_pio_s1_agent:rf_sink_ready -> led_pio_s1_agent_rsp_fifo:out_ready
	wire          led_pio_s1_agent_rsp_fifo_out_startofpacket;                              // led_pio_s1_agent_rsp_fifo:out_startofpacket -> led_pio_s1_agent:rf_sink_startofpacket
	wire          led_pio_s1_agent_rsp_fifo_out_endofpacket;                                // led_pio_s1_agent_rsp_fifo:out_endofpacket -> led_pio_s1_agent:rf_sink_endofpacket
	wire          led_pio_s1_agent_rdata_fifo_src_valid;                                    // led_pio_s1_agent:rdata_fifo_src_valid -> led_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] led_pio_s1_agent_rdata_fifo_src_data;                                     // led_pio_s1_agent:rdata_fifo_src_data -> led_pio_s1_agent_rdata_fifo:in_data
	wire          led_pio_s1_agent_rdata_fifo_src_ready;                                    // led_pio_s1_agent_rdata_fifo:in_ready -> led_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] dipsw_pio_s1_agent_m0_readdata;                                           // dipsw_pio_s1_translator:uav_readdata -> dipsw_pio_s1_agent:m0_readdata
	wire          dipsw_pio_s1_agent_m0_waitrequest;                                        // dipsw_pio_s1_translator:uav_waitrequest -> dipsw_pio_s1_agent:m0_waitrequest
	wire          dipsw_pio_s1_agent_m0_debugaccess;                                        // dipsw_pio_s1_agent:m0_debugaccess -> dipsw_pio_s1_translator:uav_debugaccess
	wire   [20:0] dipsw_pio_s1_agent_m0_address;                                            // dipsw_pio_s1_agent:m0_address -> dipsw_pio_s1_translator:uav_address
	wire    [3:0] dipsw_pio_s1_agent_m0_byteenable;                                         // dipsw_pio_s1_agent:m0_byteenable -> dipsw_pio_s1_translator:uav_byteenable
	wire          dipsw_pio_s1_agent_m0_read;                                               // dipsw_pio_s1_agent:m0_read -> dipsw_pio_s1_translator:uav_read
	wire          dipsw_pio_s1_agent_m0_readdatavalid;                                      // dipsw_pio_s1_translator:uav_readdatavalid -> dipsw_pio_s1_agent:m0_readdatavalid
	wire          dipsw_pio_s1_agent_m0_lock;                                               // dipsw_pio_s1_agent:m0_lock -> dipsw_pio_s1_translator:uav_lock
	wire   [31:0] dipsw_pio_s1_agent_m0_writedata;                                          // dipsw_pio_s1_agent:m0_writedata -> dipsw_pio_s1_translator:uav_writedata
	wire          dipsw_pio_s1_agent_m0_write;                                              // dipsw_pio_s1_agent:m0_write -> dipsw_pio_s1_translator:uav_write
	wire    [2:0] dipsw_pio_s1_agent_m0_burstcount;                                         // dipsw_pio_s1_agent:m0_burstcount -> dipsw_pio_s1_translator:uav_burstcount
	wire          dipsw_pio_s1_agent_rf_source_valid;                                       // dipsw_pio_s1_agent:rf_source_valid -> dipsw_pio_s1_agent_rsp_fifo:in_valid
	wire  [118:0] dipsw_pio_s1_agent_rf_source_data;                                        // dipsw_pio_s1_agent:rf_source_data -> dipsw_pio_s1_agent_rsp_fifo:in_data
	wire          dipsw_pio_s1_agent_rf_source_ready;                                       // dipsw_pio_s1_agent_rsp_fifo:in_ready -> dipsw_pio_s1_agent:rf_source_ready
	wire          dipsw_pio_s1_agent_rf_source_startofpacket;                               // dipsw_pio_s1_agent:rf_source_startofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          dipsw_pio_s1_agent_rf_source_endofpacket;                                 // dipsw_pio_s1_agent:rf_source_endofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          dipsw_pio_s1_agent_rsp_fifo_out_valid;                                    // dipsw_pio_s1_agent_rsp_fifo:out_valid -> dipsw_pio_s1_agent:rf_sink_valid
	wire  [118:0] dipsw_pio_s1_agent_rsp_fifo_out_data;                                     // dipsw_pio_s1_agent_rsp_fifo:out_data -> dipsw_pio_s1_agent:rf_sink_data
	wire          dipsw_pio_s1_agent_rsp_fifo_out_ready;                                    // dipsw_pio_s1_agent:rf_sink_ready -> dipsw_pio_s1_agent_rsp_fifo:out_ready
	wire          dipsw_pio_s1_agent_rsp_fifo_out_startofpacket;                            // dipsw_pio_s1_agent_rsp_fifo:out_startofpacket -> dipsw_pio_s1_agent:rf_sink_startofpacket
	wire          dipsw_pio_s1_agent_rsp_fifo_out_endofpacket;                              // dipsw_pio_s1_agent_rsp_fifo:out_endofpacket -> dipsw_pio_s1_agent:rf_sink_endofpacket
	wire          dipsw_pio_s1_agent_rdata_fifo_src_valid;                                  // dipsw_pio_s1_agent:rdata_fifo_src_valid -> dipsw_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] dipsw_pio_s1_agent_rdata_fifo_src_data;                                   // dipsw_pio_s1_agent:rdata_fifo_src_data -> dipsw_pio_s1_agent_rdata_fifo:in_data
	wire          dipsw_pio_s1_agent_rdata_fifo_src_ready;                                  // dipsw_pio_s1_agent_rdata_fifo:in_ready -> dipsw_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] button_pio_s1_agent_m0_readdata;                                          // button_pio_s1_translator:uav_readdata -> button_pio_s1_agent:m0_readdata
	wire          button_pio_s1_agent_m0_waitrequest;                                       // button_pio_s1_translator:uav_waitrequest -> button_pio_s1_agent:m0_waitrequest
	wire          button_pio_s1_agent_m0_debugaccess;                                       // button_pio_s1_agent:m0_debugaccess -> button_pio_s1_translator:uav_debugaccess
	wire   [20:0] button_pio_s1_agent_m0_address;                                           // button_pio_s1_agent:m0_address -> button_pio_s1_translator:uav_address
	wire    [3:0] button_pio_s1_agent_m0_byteenable;                                        // button_pio_s1_agent:m0_byteenable -> button_pio_s1_translator:uav_byteenable
	wire          button_pio_s1_agent_m0_read;                                              // button_pio_s1_agent:m0_read -> button_pio_s1_translator:uav_read
	wire          button_pio_s1_agent_m0_readdatavalid;                                     // button_pio_s1_translator:uav_readdatavalid -> button_pio_s1_agent:m0_readdatavalid
	wire          button_pio_s1_agent_m0_lock;                                              // button_pio_s1_agent:m0_lock -> button_pio_s1_translator:uav_lock
	wire   [31:0] button_pio_s1_agent_m0_writedata;                                         // button_pio_s1_agent:m0_writedata -> button_pio_s1_translator:uav_writedata
	wire          button_pio_s1_agent_m0_write;                                             // button_pio_s1_agent:m0_write -> button_pio_s1_translator:uav_write
	wire    [2:0] button_pio_s1_agent_m0_burstcount;                                        // button_pio_s1_agent:m0_burstcount -> button_pio_s1_translator:uav_burstcount
	wire          button_pio_s1_agent_rf_source_valid;                                      // button_pio_s1_agent:rf_source_valid -> button_pio_s1_agent_rsp_fifo:in_valid
	wire  [118:0] button_pio_s1_agent_rf_source_data;                                       // button_pio_s1_agent:rf_source_data -> button_pio_s1_agent_rsp_fifo:in_data
	wire          button_pio_s1_agent_rf_source_ready;                                      // button_pio_s1_agent_rsp_fifo:in_ready -> button_pio_s1_agent:rf_source_ready
	wire          button_pio_s1_agent_rf_source_startofpacket;                              // button_pio_s1_agent:rf_source_startofpacket -> button_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          button_pio_s1_agent_rf_source_endofpacket;                                // button_pio_s1_agent:rf_source_endofpacket -> button_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_valid;                                   // button_pio_s1_agent_rsp_fifo:out_valid -> button_pio_s1_agent:rf_sink_valid
	wire  [118:0] button_pio_s1_agent_rsp_fifo_out_data;                                    // button_pio_s1_agent_rsp_fifo:out_data -> button_pio_s1_agent:rf_sink_data
	wire          button_pio_s1_agent_rsp_fifo_out_ready;                                   // button_pio_s1_agent:rf_sink_ready -> button_pio_s1_agent_rsp_fifo:out_ready
	wire          button_pio_s1_agent_rsp_fifo_out_startofpacket;                           // button_pio_s1_agent_rsp_fifo:out_startofpacket -> button_pio_s1_agent:rf_sink_startofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_endofpacket;                             // button_pio_s1_agent_rsp_fifo:out_endofpacket -> button_pio_s1_agent:rf_sink_endofpacket
	wire          button_pio_s1_agent_rdata_fifo_src_valid;                                 // button_pio_s1_agent:rdata_fifo_src_valid -> button_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] button_pio_s1_agent_rdata_fifo_src_data;                                  // button_pio_s1_agent:rdata_fifo_src_data -> button_pio_s1_agent_rdata_fifo:in_data
	wire          button_pio_s1_agent_rdata_fifo_src_ready;                                 // button_pio_s1_agent_rdata_fifo:in_ready -> button_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] mosfet_control_s1_agent_m0_readdata;                                      // Mosfet_control_s1_translator:uav_readdata -> Mosfet_control_s1_agent:m0_readdata
	wire          mosfet_control_s1_agent_m0_waitrequest;                                   // Mosfet_control_s1_translator:uav_waitrequest -> Mosfet_control_s1_agent:m0_waitrequest
	wire          mosfet_control_s1_agent_m0_debugaccess;                                   // Mosfet_control_s1_agent:m0_debugaccess -> Mosfet_control_s1_translator:uav_debugaccess
	wire   [20:0] mosfet_control_s1_agent_m0_address;                                       // Mosfet_control_s1_agent:m0_address -> Mosfet_control_s1_translator:uav_address
	wire    [3:0] mosfet_control_s1_agent_m0_byteenable;                                    // Mosfet_control_s1_agent:m0_byteenable -> Mosfet_control_s1_translator:uav_byteenable
	wire          mosfet_control_s1_agent_m0_read;                                          // Mosfet_control_s1_agent:m0_read -> Mosfet_control_s1_translator:uav_read
	wire          mosfet_control_s1_agent_m0_readdatavalid;                                 // Mosfet_control_s1_translator:uav_readdatavalid -> Mosfet_control_s1_agent:m0_readdatavalid
	wire          mosfet_control_s1_agent_m0_lock;                                          // Mosfet_control_s1_agent:m0_lock -> Mosfet_control_s1_translator:uav_lock
	wire   [31:0] mosfet_control_s1_agent_m0_writedata;                                     // Mosfet_control_s1_agent:m0_writedata -> Mosfet_control_s1_translator:uav_writedata
	wire          mosfet_control_s1_agent_m0_write;                                         // Mosfet_control_s1_agent:m0_write -> Mosfet_control_s1_translator:uav_write
	wire    [2:0] mosfet_control_s1_agent_m0_burstcount;                                    // Mosfet_control_s1_agent:m0_burstcount -> Mosfet_control_s1_translator:uav_burstcount
	wire          mosfet_control_s1_agent_rf_source_valid;                                  // Mosfet_control_s1_agent:rf_source_valid -> Mosfet_control_s1_agent_rsp_fifo:in_valid
	wire  [118:0] mosfet_control_s1_agent_rf_source_data;                                   // Mosfet_control_s1_agent:rf_source_data -> Mosfet_control_s1_agent_rsp_fifo:in_data
	wire          mosfet_control_s1_agent_rf_source_ready;                                  // Mosfet_control_s1_agent_rsp_fifo:in_ready -> Mosfet_control_s1_agent:rf_source_ready
	wire          mosfet_control_s1_agent_rf_source_startofpacket;                          // Mosfet_control_s1_agent:rf_source_startofpacket -> Mosfet_control_s1_agent_rsp_fifo:in_startofpacket
	wire          mosfet_control_s1_agent_rf_source_endofpacket;                            // Mosfet_control_s1_agent:rf_source_endofpacket -> Mosfet_control_s1_agent_rsp_fifo:in_endofpacket
	wire          mosfet_control_s1_agent_rsp_fifo_out_valid;                               // Mosfet_control_s1_agent_rsp_fifo:out_valid -> Mosfet_control_s1_agent:rf_sink_valid
	wire  [118:0] mosfet_control_s1_agent_rsp_fifo_out_data;                                // Mosfet_control_s1_agent_rsp_fifo:out_data -> Mosfet_control_s1_agent:rf_sink_data
	wire          mosfet_control_s1_agent_rsp_fifo_out_ready;                               // Mosfet_control_s1_agent:rf_sink_ready -> Mosfet_control_s1_agent_rsp_fifo:out_ready
	wire          mosfet_control_s1_agent_rsp_fifo_out_startofpacket;                       // Mosfet_control_s1_agent_rsp_fifo:out_startofpacket -> Mosfet_control_s1_agent:rf_sink_startofpacket
	wire          mosfet_control_s1_agent_rsp_fifo_out_endofpacket;                         // Mosfet_control_s1_agent_rsp_fifo:out_endofpacket -> Mosfet_control_s1_agent:rf_sink_endofpacket
	wire          mosfet_control_s1_agent_rdata_fifo_src_valid;                             // Mosfet_control_s1_agent:rdata_fifo_src_valid -> Mosfet_control_s1_agent_rdata_fifo:in_valid
	wire   [33:0] mosfet_control_s1_agent_rdata_fifo_src_data;                              // Mosfet_control_s1_agent:rdata_fifo_src_data -> Mosfet_control_s1_agent_rdata_fifo:in_data
	wire          mosfet_control_s1_agent_rdata_fifo_src_ready;                             // Mosfet_control_s1_agent_rdata_fifo:in_ready -> Mosfet_control_s1_agent:rdata_fifo_src_ready
	wire   [31:0] mosfet_en_s1_agent_m0_readdata;                                           // Mosfet_en_s1_translator:uav_readdata -> Mosfet_en_s1_agent:m0_readdata
	wire          mosfet_en_s1_agent_m0_waitrequest;                                        // Mosfet_en_s1_translator:uav_waitrequest -> Mosfet_en_s1_agent:m0_waitrequest
	wire          mosfet_en_s1_agent_m0_debugaccess;                                        // Mosfet_en_s1_agent:m0_debugaccess -> Mosfet_en_s1_translator:uav_debugaccess
	wire   [20:0] mosfet_en_s1_agent_m0_address;                                            // Mosfet_en_s1_agent:m0_address -> Mosfet_en_s1_translator:uav_address
	wire    [3:0] mosfet_en_s1_agent_m0_byteenable;                                         // Mosfet_en_s1_agent:m0_byteenable -> Mosfet_en_s1_translator:uav_byteenable
	wire          mosfet_en_s1_agent_m0_read;                                               // Mosfet_en_s1_agent:m0_read -> Mosfet_en_s1_translator:uav_read
	wire          mosfet_en_s1_agent_m0_readdatavalid;                                      // Mosfet_en_s1_translator:uav_readdatavalid -> Mosfet_en_s1_agent:m0_readdatavalid
	wire          mosfet_en_s1_agent_m0_lock;                                               // Mosfet_en_s1_agent:m0_lock -> Mosfet_en_s1_translator:uav_lock
	wire   [31:0] mosfet_en_s1_agent_m0_writedata;                                          // Mosfet_en_s1_agent:m0_writedata -> Mosfet_en_s1_translator:uav_writedata
	wire          mosfet_en_s1_agent_m0_write;                                              // Mosfet_en_s1_agent:m0_write -> Mosfet_en_s1_translator:uav_write
	wire    [2:0] mosfet_en_s1_agent_m0_burstcount;                                         // Mosfet_en_s1_agent:m0_burstcount -> Mosfet_en_s1_translator:uav_burstcount
	wire          mosfet_en_s1_agent_rf_source_valid;                                       // Mosfet_en_s1_agent:rf_source_valid -> Mosfet_en_s1_agent_rsp_fifo:in_valid
	wire  [118:0] mosfet_en_s1_agent_rf_source_data;                                        // Mosfet_en_s1_agent:rf_source_data -> Mosfet_en_s1_agent_rsp_fifo:in_data
	wire          mosfet_en_s1_agent_rf_source_ready;                                       // Mosfet_en_s1_agent_rsp_fifo:in_ready -> Mosfet_en_s1_agent:rf_source_ready
	wire          mosfet_en_s1_agent_rf_source_startofpacket;                               // Mosfet_en_s1_agent:rf_source_startofpacket -> Mosfet_en_s1_agent_rsp_fifo:in_startofpacket
	wire          mosfet_en_s1_agent_rf_source_endofpacket;                                 // Mosfet_en_s1_agent:rf_source_endofpacket -> Mosfet_en_s1_agent_rsp_fifo:in_endofpacket
	wire          mosfet_en_s1_agent_rsp_fifo_out_valid;                                    // Mosfet_en_s1_agent_rsp_fifo:out_valid -> Mosfet_en_s1_agent:rf_sink_valid
	wire  [118:0] mosfet_en_s1_agent_rsp_fifo_out_data;                                     // Mosfet_en_s1_agent_rsp_fifo:out_data -> Mosfet_en_s1_agent:rf_sink_data
	wire          mosfet_en_s1_agent_rsp_fifo_out_ready;                                    // Mosfet_en_s1_agent:rf_sink_ready -> Mosfet_en_s1_agent_rsp_fifo:out_ready
	wire          mosfet_en_s1_agent_rsp_fifo_out_startofpacket;                            // Mosfet_en_s1_agent_rsp_fifo:out_startofpacket -> Mosfet_en_s1_agent:rf_sink_startofpacket
	wire          mosfet_en_s1_agent_rsp_fifo_out_endofpacket;                              // Mosfet_en_s1_agent_rsp_fifo:out_endofpacket -> Mosfet_en_s1_agent:rf_sink_endofpacket
	wire          mosfet_en_s1_agent_rdata_fifo_src_valid;                                  // Mosfet_en_s1_agent:rdata_fifo_src_valid -> Mosfet_en_s1_agent_rdata_fifo:in_valid
	wire   [33:0] mosfet_en_s1_agent_rdata_fifo_src_data;                                   // Mosfet_en_s1_agent:rdata_fifo_src_data -> Mosfet_en_s1_agent_rdata_fifo:in_data
	wire          mosfet_en_s1_agent_rdata_fifo_src_ready;                                  // Mosfet_en_s1_agent_rdata_fifo:in_ready -> Mosfet_en_s1_agent:rdata_fifo_src_ready
	wire   [31:0] valves_control_s1_agent_m0_readdata;                                      // Valves_control_s1_translator:uav_readdata -> Valves_control_s1_agent:m0_readdata
	wire          valves_control_s1_agent_m0_waitrequest;                                   // Valves_control_s1_translator:uav_waitrequest -> Valves_control_s1_agent:m0_waitrequest
	wire          valves_control_s1_agent_m0_debugaccess;                                   // Valves_control_s1_agent:m0_debugaccess -> Valves_control_s1_translator:uav_debugaccess
	wire   [20:0] valves_control_s1_agent_m0_address;                                       // Valves_control_s1_agent:m0_address -> Valves_control_s1_translator:uav_address
	wire    [3:0] valves_control_s1_agent_m0_byteenable;                                    // Valves_control_s1_agent:m0_byteenable -> Valves_control_s1_translator:uav_byteenable
	wire          valves_control_s1_agent_m0_read;                                          // Valves_control_s1_agent:m0_read -> Valves_control_s1_translator:uav_read
	wire          valves_control_s1_agent_m0_readdatavalid;                                 // Valves_control_s1_translator:uav_readdatavalid -> Valves_control_s1_agent:m0_readdatavalid
	wire          valves_control_s1_agent_m0_lock;                                          // Valves_control_s1_agent:m0_lock -> Valves_control_s1_translator:uav_lock
	wire   [31:0] valves_control_s1_agent_m0_writedata;                                     // Valves_control_s1_agent:m0_writedata -> Valves_control_s1_translator:uav_writedata
	wire          valves_control_s1_agent_m0_write;                                         // Valves_control_s1_agent:m0_write -> Valves_control_s1_translator:uav_write
	wire    [2:0] valves_control_s1_agent_m0_burstcount;                                    // Valves_control_s1_agent:m0_burstcount -> Valves_control_s1_translator:uav_burstcount
	wire          valves_control_s1_agent_rf_source_valid;                                  // Valves_control_s1_agent:rf_source_valid -> Valves_control_s1_agent_rsp_fifo:in_valid
	wire  [118:0] valves_control_s1_agent_rf_source_data;                                   // Valves_control_s1_agent:rf_source_data -> Valves_control_s1_agent_rsp_fifo:in_data
	wire          valves_control_s1_agent_rf_source_ready;                                  // Valves_control_s1_agent_rsp_fifo:in_ready -> Valves_control_s1_agent:rf_source_ready
	wire          valves_control_s1_agent_rf_source_startofpacket;                          // Valves_control_s1_agent:rf_source_startofpacket -> Valves_control_s1_agent_rsp_fifo:in_startofpacket
	wire          valves_control_s1_agent_rf_source_endofpacket;                            // Valves_control_s1_agent:rf_source_endofpacket -> Valves_control_s1_agent_rsp_fifo:in_endofpacket
	wire          valves_control_s1_agent_rsp_fifo_out_valid;                               // Valves_control_s1_agent_rsp_fifo:out_valid -> Valves_control_s1_agent:rf_sink_valid
	wire  [118:0] valves_control_s1_agent_rsp_fifo_out_data;                                // Valves_control_s1_agent_rsp_fifo:out_data -> Valves_control_s1_agent:rf_sink_data
	wire          valves_control_s1_agent_rsp_fifo_out_ready;                               // Valves_control_s1_agent:rf_sink_ready -> Valves_control_s1_agent_rsp_fifo:out_ready
	wire          valves_control_s1_agent_rsp_fifo_out_startofpacket;                       // Valves_control_s1_agent_rsp_fifo:out_startofpacket -> Valves_control_s1_agent:rf_sink_startofpacket
	wire          valves_control_s1_agent_rsp_fifo_out_endofpacket;                         // Valves_control_s1_agent_rsp_fifo:out_endofpacket -> Valves_control_s1_agent:rf_sink_endofpacket
	wire          valves_control_s1_agent_rdata_fifo_src_valid;                             // Valves_control_s1_agent:rdata_fifo_src_valid -> Valves_control_s1_agent_rdata_fifo:in_valid
	wire   [33:0] valves_control_s1_agent_rdata_fifo_src_data;                              // Valves_control_s1_agent:rdata_fifo_src_data -> Valves_control_s1_agent_rdata_fifo:in_data
	wire          valves_control_s1_agent_rdata_fifo_src_ready;                             // Valves_control_s1_agent_rdata_fifo:in_ready -> Valves_control_s1_agent:rdata_fifo_src_ready
	wire   [31:0] electro_control_s1_agent_m0_readdata;                                     // Electro_control_s1_translator:uav_readdata -> Electro_control_s1_agent:m0_readdata
	wire          electro_control_s1_agent_m0_waitrequest;                                  // Electro_control_s1_translator:uav_waitrequest -> Electro_control_s1_agent:m0_waitrequest
	wire          electro_control_s1_agent_m0_debugaccess;                                  // Electro_control_s1_agent:m0_debugaccess -> Electro_control_s1_translator:uav_debugaccess
	wire   [20:0] electro_control_s1_agent_m0_address;                                      // Electro_control_s1_agent:m0_address -> Electro_control_s1_translator:uav_address
	wire    [3:0] electro_control_s1_agent_m0_byteenable;                                   // Electro_control_s1_agent:m0_byteenable -> Electro_control_s1_translator:uav_byteenable
	wire          electro_control_s1_agent_m0_read;                                         // Electro_control_s1_agent:m0_read -> Electro_control_s1_translator:uav_read
	wire          electro_control_s1_agent_m0_readdatavalid;                                // Electro_control_s1_translator:uav_readdatavalid -> Electro_control_s1_agent:m0_readdatavalid
	wire          electro_control_s1_agent_m0_lock;                                         // Electro_control_s1_agent:m0_lock -> Electro_control_s1_translator:uav_lock
	wire   [31:0] electro_control_s1_agent_m0_writedata;                                    // Electro_control_s1_agent:m0_writedata -> Electro_control_s1_translator:uav_writedata
	wire          electro_control_s1_agent_m0_write;                                        // Electro_control_s1_agent:m0_write -> Electro_control_s1_translator:uav_write
	wire    [2:0] electro_control_s1_agent_m0_burstcount;                                   // Electro_control_s1_agent:m0_burstcount -> Electro_control_s1_translator:uav_burstcount
	wire          electro_control_s1_agent_rf_source_valid;                                 // Electro_control_s1_agent:rf_source_valid -> Electro_control_s1_agent_rsp_fifo:in_valid
	wire  [118:0] electro_control_s1_agent_rf_source_data;                                  // Electro_control_s1_agent:rf_source_data -> Electro_control_s1_agent_rsp_fifo:in_data
	wire          electro_control_s1_agent_rf_source_ready;                                 // Electro_control_s1_agent_rsp_fifo:in_ready -> Electro_control_s1_agent:rf_source_ready
	wire          electro_control_s1_agent_rf_source_startofpacket;                         // Electro_control_s1_agent:rf_source_startofpacket -> Electro_control_s1_agent_rsp_fifo:in_startofpacket
	wire          electro_control_s1_agent_rf_source_endofpacket;                           // Electro_control_s1_agent:rf_source_endofpacket -> Electro_control_s1_agent_rsp_fifo:in_endofpacket
	wire          electro_control_s1_agent_rsp_fifo_out_valid;                              // Electro_control_s1_agent_rsp_fifo:out_valid -> Electro_control_s1_agent:rf_sink_valid
	wire  [118:0] electro_control_s1_agent_rsp_fifo_out_data;                               // Electro_control_s1_agent_rsp_fifo:out_data -> Electro_control_s1_agent:rf_sink_data
	wire          electro_control_s1_agent_rsp_fifo_out_ready;                              // Electro_control_s1_agent:rf_sink_ready -> Electro_control_s1_agent_rsp_fifo:out_ready
	wire          electro_control_s1_agent_rsp_fifo_out_startofpacket;                      // Electro_control_s1_agent_rsp_fifo:out_startofpacket -> Electro_control_s1_agent:rf_sink_startofpacket
	wire          electro_control_s1_agent_rsp_fifo_out_endofpacket;                        // Electro_control_s1_agent_rsp_fifo:out_endofpacket -> Electro_control_s1_agent:rf_sink_endofpacket
	wire          electro_control_s1_agent_rdata_fifo_src_valid;                            // Electro_control_s1_agent:rdata_fifo_src_valid -> Electro_control_s1_agent_rdata_fifo:in_valid
	wire   [33:0] electro_control_s1_agent_rdata_fifo_src_data;                             // Electro_control_s1_agent:rdata_fifo_src_data -> Electro_control_s1_agent_rdata_fifo:in_data
	wire          electro_control_s1_agent_rdata_fifo_src_ready;                            // Electro_control_s1_agent_rdata_fifo:in_ready -> Electro_control_s1_agent:rdata_fifo_src_ready
	wire   [31:0] alarm_div_32_s1_agent_m0_readdata;                                        // Alarm_div_32_s1_translator:uav_readdata -> Alarm_div_32_s1_agent:m0_readdata
	wire          alarm_div_32_s1_agent_m0_waitrequest;                                     // Alarm_div_32_s1_translator:uav_waitrequest -> Alarm_div_32_s1_agent:m0_waitrequest
	wire          alarm_div_32_s1_agent_m0_debugaccess;                                     // Alarm_div_32_s1_agent:m0_debugaccess -> Alarm_div_32_s1_translator:uav_debugaccess
	wire   [20:0] alarm_div_32_s1_agent_m0_address;                                         // Alarm_div_32_s1_agent:m0_address -> Alarm_div_32_s1_translator:uav_address
	wire    [3:0] alarm_div_32_s1_agent_m0_byteenable;                                      // Alarm_div_32_s1_agent:m0_byteenable -> Alarm_div_32_s1_translator:uav_byteenable
	wire          alarm_div_32_s1_agent_m0_read;                                            // Alarm_div_32_s1_agent:m0_read -> Alarm_div_32_s1_translator:uav_read
	wire          alarm_div_32_s1_agent_m0_readdatavalid;                                   // Alarm_div_32_s1_translator:uav_readdatavalid -> Alarm_div_32_s1_agent:m0_readdatavalid
	wire          alarm_div_32_s1_agent_m0_lock;                                            // Alarm_div_32_s1_agent:m0_lock -> Alarm_div_32_s1_translator:uav_lock
	wire   [31:0] alarm_div_32_s1_agent_m0_writedata;                                       // Alarm_div_32_s1_agent:m0_writedata -> Alarm_div_32_s1_translator:uav_writedata
	wire          alarm_div_32_s1_agent_m0_write;                                           // Alarm_div_32_s1_agent:m0_write -> Alarm_div_32_s1_translator:uav_write
	wire    [2:0] alarm_div_32_s1_agent_m0_burstcount;                                      // Alarm_div_32_s1_agent:m0_burstcount -> Alarm_div_32_s1_translator:uav_burstcount
	wire          alarm_div_32_s1_agent_rf_source_valid;                                    // Alarm_div_32_s1_agent:rf_source_valid -> Alarm_div_32_s1_agent_rsp_fifo:in_valid
	wire  [118:0] alarm_div_32_s1_agent_rf_source_data;                                     // Alarm_div_32_s1_agent:rf_source_data -> Alarm_div_32_s1_agent_rsp_fifo:in_data
	wire          alarm_div_32_s1_agent_rf_source_ready;                                    // Alarm_div_32_s1_agent_rsp_fifo:in_ready -> Alarm_div_32_s1_agent:rf_source_ready
	wire          alarm_div_32_s1_agent_rf_source_startofpacket;                            // Alarm_div_32_s1_agent:rf_source_startofpacket -> Alarm_div_32_s1_agent_rsp_fifo:in_startofpacket
	wire          alarm_div_32_s1_agent_rf_source_endofpacket;                              // Alarm_div_32_s1_agent:rf_source_endofpacket -> Alarm_div_32_s1_agent_rsp_fifo:in_endofpacket
	wire          alarm_div_32_s1_agent_rsp_fifo_out_valid;                                 // Alarm_div_32_s1_agent_rsp_fifo:out_valid -> Alarm_div_32_s1_agent:rf_sink_valid
	wire  [118:0] alarm_div_32_s1_agent_rsp_fifo_out_data;                                  // Alarm_div_32_s1_agent_rsp_fifo:out_data -> Alarm_div_32_s1_agent:rf_sink_data
	wire          alarm_div_32_s1_agent_rsp_fifo_out_ready;                                 // Alarm_div_32_s1_agent:rf_sink_ready -> Alarm_div_32_s1_agent_rsp_fifo:out_ready
	wire          alarm_div_32_s1_agent_rsp_fifo_out_startofpacket;                         // Alarm_div_32_s1_agent_rsp_fifo:out_startofpacket -> Alarm_div_32_s1_agent:rf_sink_startofpacket
	wire          alarm_div_32_s1_agent_rsp_fifo_out_endofpacket;                           // Alarm_div_32_s1_agent_rsp_fifo:out_endofpacket -> Alarm_div_32_s1_agent:rf_sink_endofpacket
	wire          alarm_div_32_s1_agent_rdata_fifo_src_valid;                               // Alarm_div_32_s1_agent:rdata_fifo_src_valid -> Alarm_div_32_s1_agent_rdata_fifo:in_valid
	wire   [33:0] alarm_div_32_s1_agent_rdata_fifo_src_data;                                // Alarm_div_32_s1_agent:rdata_fifo_src_data -> Alarm_div_32_s1_agent_rdata_fifo:in_data
	wire          alarm_div_32_s1_agent_rdata_fifo_src_ready;                               // Alarm_div_32_s1_agent_rdata_fifo:in_ready -> Alarm_div_32_s1_agent:rdata_fifo_src_ready
	wire   [31:0] buttons_inicio_emer_final_control_s1_agent_m0_readdata;                   // Buttons_Inicio_Emer_Final_control_s1_translator:uav_readdata -> Buttons_Inicio_Emer_Final_control_s1_agent:m0_readdata
	wire          buttons_inicio_emer_final_control_s1_agent_m0_waitrequest;                // Buttons_Inicio_Emer_Final_control_s1_translator:uav_waitrequest -> Buttons_Inicio_Emer_Final_control_s1_agent:m0_waitrequest
	wire          buttons_inicio_emer_final_control_s1_agent_m0_debugaccess;                // Buttons_Inicio_Emer_Final_control_s1_agent:m0_debugaccess -> Buttons_Inicio_Emer_Final_control_s1_translator:uav_debugaccess
	wire   [20:0] buttons_inicio_emer_final_control_s1_agent_m0_address;                    // Buttons_Inicio_Emer_Final_control_s1_agent:m0_address -> Buttons_Inicio_Emer_Final_control_s1_translator:uav_address
	wire    [3:0] buttons_inicio_emer_final_control_s1_agent_m0_byteenable;                 // Buttons_Inicio_Emer_Final_control_s1_agent:m0_byteenable -> Buttons_Inicio_Emer_Final_control_s1_translator:uav_byteenable
	wire          buttons_inicio_emer_final_control_s1_agent_m0_read;                       // Buttons_Inicio_Emer_Final_control_s1_agent:m0_read -> Buttons_Inicio_Emer_Final_control_s1_translator:uav_read
	wire          buttons_inicio_emer_final_control_s1_agent_m0_readdatavalid;              // Buttons_Inicio_Emer_Final_control_s1_translator:uav_readdatavalid -> Buttons_Inicio_Emer_Final_control_s1_agent:m0_readdatavalid
	wire          buttons_inicio_emer_final_control_s1_agent_m0_lock;                       // Buttons_Inicio_Emer_Final_control_s1_agent:m0_lock -> Buttons_Inicio_Emer_Final_control_s1_translator:uav_lock
	wire   [31:0] buttons_inicio_emer_final_control_s1_agent_m0_writedata;                  // Buttons_Inicio_Emer_Final_control_s1_agent:m0_writedata -> Buttons_Inicio_Emer_Final_control_s1_translator:uav_writedata
	wire          buttons_inicio_emer_final_control_s1_agent_m0_write;                      // Buttons_Inicio_Emer_Final_control_s1_agent:m0_write -> Buttons_Inicio_Emer_Final_control_s1_translator:uav_write
	wire    [2:0] buttons_inicio_emer_final_control_s1_agent_m0_burstcount;                 // Buttons_Inicio_Emer_Final_control_s1_agent:m0_burstcount -> Buttons_Inicio_Emer_Final_control_s1_translator:uav_burstcount
	wire          buttons_inicio_emer_final_control_s1_agent_rf_source_valid;               // Buttons_Inicio_Emer_Final_control_s1_agent:rf_source_valid -> Buttons_Inicio_Emer_Final_control_s1_agent_rsp_fifo:in_valid
	wire  [118:0] buttons_inicio_emer_final_control_s1_agent_rf_source_data;                // Buttons_Inicio_Emer_Final_control_s1_agent:rf_source_data -> Buttons_Inicio_Emer_Final_control_s1_agent_rsp_fifo:in_data
	wire          buttons_inicio_emer_final_control_s1_agent_rf_source_ready;               // Buttons_Inicio_Emer_Final_control_s1_agent_rsp_fifo:in_ready -> Buttons_Inicio_Emer_Final_control_s1_agent:rf_source_ready
	wire          buttons_inicio_emer_final_control_s1_agent_rf_source_startofpacket;       // Buttons_Inicio_Emer_Final_control_s1_agent:rf_source_startofpacket -> Buttons_Inicio_Emer_Final_control_s1_agent_rsp_fifo:in_startofpacket
	wire          buttons_inicio_emer_final_control_s1_agent_rf_source_endofpacket;         // Buttons_Inicio_Emer_Final_control_s1_agent:rf_source_endofpacket -> Buttons_Inicio_Emer_Final_control_s1_agent_rsp_fifo:in_endofpacket
	wire          buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_valid;            // Buttons_Inicio_Emer_Final_control_s1_agent_rsp_fifo:out_valid -> Buttons_Inicio_Emer_Final_control_s1_agent:rf_sink_valid
	wire  [118:0] buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_data;             // Buttons_Inicio_Emer_Final_control_s1_agent_rsp_fifo:out_data -> Buttons_Inicio_Emer_Final_control_s1_agent:rf_sink_data
	wire          buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_ready;            // Buttons_Inicio_Emer_Final_control_s1_agent:rf_sink_ready -> Buttons_Inicio_Emer_Final_control_s1_agent_rsp_fifo:out_ready
	wire          buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_startofpacket;    // Buttons_Inicio_Emer_Final_control_s1_agent_rsp_fifo:out_startofpacket -> Buttons_Inicio_Emer_Final_control_s1_agent:rf_sink_startofpacket
	wire          buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_endofpacket;      // Buttons_Inicio_Emer_Final_control_s1_agent_rsp_fifo:out_endofpacket -> Buttons_Inicio_Emer_Final_control_s1_agent:rf_sink_endofpacket
	wire          buttons_inicio_emer_final_control_s1_agent_rdata_fifo_src_valid;          // Buttons_Inicio_Emer_Final_control_s1_agent:rdata_fifo_src_valid -> Buttons_Inicio_Emer_Final_control_s1_agent_rdata_fifo:in_valid
	wire   [33:0] buttons_inicio_emer_final_control_s1_agent_rdata_fifo_src_data;           // Buttons_Inicio_Emer_Final_control_s1_agent:rdata_fifo_src_data -> Buttons_Inicio_Emer_Final_control_s1_agent_rdata_fifo:in_data
	wire          buttons_inicio_emer_final_control_s1_agent_rdata_fifo_src_ready;          // Buttons_Inicio_Emer_Final_control_s1_agent_rdata_fifo:in_ready -> Buttons_Inicio_Emer_Final_control_s1_agent:rdata_fifo_src_ready
	wire   [31:0] max6675_temp_s1_agent_m0_readdata;                                        // Max6675_Temp_s1_translator:uav_readdata -> Max6675_Temp_s1_agent:m0_readdata
	wire          max6675_temp_s1_agent_m0_waitrequest;                                     // Max6675_Temp_s1_translator:uav_waitrequest -> Max6675_Temp_s1_agent:m0_waitrequest
	wire          max6675_temp_s1_agent_m0_debugaccess;                                     // Max6675_Temp_s1_agent:m0_debugaccess -> Max6675_Temp_s1_translator:uav_debugaccess
	wire   [20:0] max6675_temp_s1_agent_m0_address;                                         // Max6675_Temp_s1_agent:m0_address -> Max6675_Temp_s1_translator:uav_address
	wire    [3:0] max6675_temp_s1_agent_m0_byteenable;                                      // Max6675_Temp_s1_agent:m0_byteenable -> Max6675_Temp_s1_translator:uav_byteenable
	wire          max6675_temp_s1_agent_m0_read;                                            // Max6675_Temp_s1_agent:m0_read -> Max6675_Temp_s1_translator:uav_read
	wire          max6675_temp_s1_agent_m0_readdatavalid;                                   // Max6675_Temp_s1_translator:uav_readdatavalid -> Max6675_Temp_s1_agent:m0_readdatavalid
	wire          max6675_temp_s1_agent_m0_lock;                                            // Max6675_Temp_s1_agent:m0_lock -> Max6675_Temp_s1_translator:uav_lock
	wire   [31:0] max6675_temp_s1_agent_m0_writedata;                                       // Max6675_Temp_s1_agent:m0_writedata -> Max6675_Temp_s1_translator:uav_writedata
	wire          max6675_temp_s1_agent_m0_write;                                           // Max6675_Temp_s1_agent:m0_write -> Max6675_Temp_s1_translator:uav_write
	wire    [2:0] max6675_temp_s1_agent_m0_burstcount;                                      // Max6675_Temp_s1_agent:m0_burstcount -> Max6675_Temp_s1_translator:uav_burstcount
	wire          max6675_temp_s1_agent_rf_source_valid;                                    // Max6675_Temp_s1_agent:rf_source_valid -> Max6675_Temp_s1_agent_rsp_fifo:in_valid
	wire  [118:0] max6675_temp_s1_agent_rf_source_data;                                     // Max6675_Temp_s1_agent:rf_source_data -> Max6675_Temp_s1_agent_rsp_fifo:in_data
	wire          max6675_temp_s1_agent_rf_source_ready;                                    // Max6675_Temp_s1_agent_rsp_fifo:in_ready -> Max6675_Temp_s1_agent:rf_source_ready
	wire          max6675_temp_s1_agent_rf_source_startofpacket;                            // Max6675_Temp_s1_agent:rf_source_startofpacket -> Max6675_Temp_s1_agent_rsp_fifo:in_startofpacket
	wire          max6675_temp_s1_agent_rf_source_endofpacket;                              // Max6675_Temp_s1_agent:rf_source_endofpacket -> Max6675_Temp_s1_agent_rsp_fifo:in_endofpacket
	wire          max6675_temp_s1_agent_rsp_fifo_out_valid;                                 // Max6675_Temp_s1_agent_rsp_fifo:out_valid -> Max6675_Temp_s1_agent:rf_sink_valid
	wire  [118:0] max6675_temp_s1_agent_rsp_fifo_out_data;                                  // Max6675_Temp_s1_agent_rsp_fifo:out_data -> Max6675_Temp_s1_agent:rf_sink_data
	wire          max6675_temp_s1_agent_rsp_fifo_out_ready;                                 // Max6675_Temp_s1_agent:rf_sink_ready -> Max6675_Temp_s1_agent_rsp_fifo:out_ready
	wire          max6675_temp_s1_agent_rsp_fifo_out_startofpacket;                         // Max6675_Temp_s1_agent_rsp_fifo:out_startofpacket -> Max6675_Temp_s1_agent:rf_sink_startofpacket
	wire          max6675_temp_s1_agent_rsp_fifo_out_endofpacket;                           // Max6675_Temp_s1_agent_rsp_fifo:out_endofpacket -> Max6675_Temp_s1_agent:rf_sink_endofpacket
	wire          max6675_temp_s1_agent_rdata_fifo_src_valid;                               // Max6675_Temp_s1_agent:rdata_fifo_src_valid -> Max6675_Temp_s1_agent_rdata_fifo:in_valid
	wire   [33:0] max6675_temp_s1_agent_rdata_fifo_src_data;                                // Max6675_Temp_s1_agent:rdata_fifo_src_data -> Max6675_Temp_s1_agent_rdata_fifo:in_data
	wire          max6675_temp_s1_agent_rdata_fifo_src_ready;                               // Max6675_Temp_s1_agent_rdata_fifo:in_ready -> Max6675_Temp_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sel_max667_s1_agent_m0_readdata;                                          // Sel_Max667_s1_translator:uav_readdata -> Sel_Max667_s1_agent:m0_readdata
	wire          sel_max667_s1_agent_m0_waitrequest;                                       // Sel_Max667_s1_translator:uav_waitrequest -> Sel_Max667_s1_agent:m0_waitrequest
	wire          sel_max667_s1_agent_m0_debugaccess;                                       // Sel_Max667_s1_agent:m0_debugaccess -> Sel_Max667_s1_translator:uav_debugaccess
	wire   [20:0] sel_max667_s1_agent_m0_address;                                           // Sel_Max667_s1_agent:m0_address -> Sel_Max667_s1_translator:uav_address
	wire    [3:0] sel_max667_s1_agent_m0_byteenable;                                        // Sel_Max667_s1_agent:m0_byteenable -> Sel_Max667_s1_translator:uav_byteenable
	wire          sel_max667_s1_agent_m0_read;                                              // Sel_Max667_s1_agent:m0_read -> Sel_Max667_s1_translator:uav_read
	wire          sel_max667_s1_agent_m0_readdatavalid;                                     // Sel_Max667_s1_translator:uav_readdatavalid -> Sel_Max667_s1_agent:m0_readdatavalid
	wire          sel_max667_s1_agent_m0_lock;                                              // Sel_Max667_s1_agent:m0_lock -> Sel_Max667_s1_translator:uav_lock
	wire   [31:0] sel_max667_s1_agent_m0_writedata;                                         // Sel_Max667_s1_agent:m0_writedata -> Sel_Max667_s1_translator:uav_writedata
	wire          sel_max667_s1_agent_m0_write;                                             // Sel_Max667_s1_agent:m0_write -> Sel_Max667_s1_translator:uav_write
	wire    [2:0] sel_max667_s1_agent_m0_burstcount;                                        // Sel_Max667_s1_agent:m0_burstcount -> Sel_Max667_s1_translator:uav_burstcount
	wire          sel_max667_s1_agent_rf_source_valid;                                      // Sel_Max667_s1_agent:rf_source_valid -> Sel_Max667_s1_agent_rsp_fifo:in_valid
	wire  [118:0] sel_max667_s1_agent_rf_source_data;                                       // Sel_Max667_s1_agent:rf_source_data -> Sel_Max667_s1_agent_rsp_fifo:in_data
	wire          sel_max667_s1_agent_rf_source_ready;                                      // Sel_Max667_s1_agent_rsp_fifo:in_ready -> Sel_Max667_s1_agent:rf_source_ready
	wire          sel_max667_s1_agent_rf_source_startofpacket;                              // Sel_Max667_s1_agent:rf_source_startofpacket -> Sel_Max667_s1_agent_rsp_fifo:in_startofpacket
	wire          sel_max667_s1_agent_rf_source_endofpacket;                                // Sel_Max667_s1_agent:rf_source_endofpacket -> Sel_Max667_s1_agent_rsp_fifo:in_endofpacket
	wire          sel_max667_s1_agent_rsp_fifo_out_valid;                                   // Sel_Max667_s1_agent_rsp_fifo:out_valid -> Sel_Max667_s1_agent:rf_sink_valid
	wire  [118:0] sel_max667_s1_agent_rsp_fifo_out_data;                                    // Sel_Max667_s1_agent_rsp_fifo:out_data -> Sel_Max667_s1_agent:rf_sink_data
	wire          sel_max667_s1_agent_rsp_fifo_out_ready;                                   // Sel_Max667_s1_agent:rf_sink_ready -> Sel_Max667_s1_agent_rsp_fifo:out_ready
	wire          sel_max667_s1_agent_rsp_fifo_out_startofpacket;                           // Sel_Max667_s1_agent_rsp_fifo:out_startofpacket -> Sel_Max667_s1_agent:rf_sink_startofpacket
	wire          sel_max667_s1_agent_rsp_fifo_out_endofpacket;                             // Sel_Max667_s1_agent_rsp_fifo:out_endofpacket -> Sel_Max667_s1_agent:rf_sink_endofpacket
	wire          sel_max667_s1_agent_rdata_fifo_src_valid;                                 // Sel_Max667_s1_agent:rdata_fifo_src_valid -> Sel_Max667_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sel_max667_s1_agent_rdata_fifo_src_data;                                  // Sel_Max667_s1_agent:rdata_fifo_src_data -> Sel_Max667_s1_agent_rdata_fifo:in_data
	wire          sel_max667_s1_agent_rdata_fifo_src_ready;                                 // Sel_Max667_s1_agent_rdata_fifo:in_ready -> Sel_Max667_s1_agent:rdata_fifo_src_ready
	wire   [31:0] adc_input_data_s1_agent_m0_readdata;                                      // ADC_input_data_s1_translator:uav_readdata -> ADC_input_data_s1_agent:m0_readdata
	wire          adc_input_data_s1_agent_m0_waitrequest;                                   // ADC_input_data_s1_translator:uav_waitrequest -> ADC_input_data_s1_agent:m0_waitrequest
	wire          adc_input_data_s1_agent_m0_debugaccess;                                   // ADC_input_data_s1_agent:m0_debugaccess -> ADC_input_data_s1_translator:uav_debugaccess
	wire   [20:0] adc_input_data_s1_agent_m0_address;                                       // ADC_input_data_s1_agent:m0_address -> ADC_input_data_s1_translator:uav_address
	wire    [3:0] adc_input_data_s1_agent_m0_byteenable;                                    // ADC_input_data_s1_agent:m0_byteenable -> ADC_input_data_s1_translator:uav_byteenable
	wire          adc_input_data_s1_agent_m0_read;                                          // ADC_input_data_s1_agent:m0_read -> ADC_input_data_s1_translator:uav_read
	wire          adc_input_data_s1_agent_m0_readdatavalid;                                 // ADC_input_data_s1_translator:uav_readdatavalid -> ADC_input_data_s1_agent:m0_readdatavalid
	wire          adc_input_data_s1_agent_m0_lock;                                          // ADC_input_data_s1_agent:m0_lock -> ADC_input_data_s1_translator:uav_lock
	wire   [31:0] adc_input_data_s1_agent_m0_writedata;                                     // ADC_input_data_s1_agent:m0_writedata -> ADC_input_data_s1_translator:uav_writedata
	wire          adc_input_data_s1_agent_m0_write;                                         // ADC_input_data_s1_agent:m0_write -> ADC_input_data_s1_translator:uav_write
	wire    [2:0] adc_input_data_s1_agent_m0_burstcount;                                    // ADC_input_data_s1_agent:m0_burstcount -> ADC_input_data_s1_translator:uav_burstcount
	wire          adc_input_data_s1_agent_rf_source_valid;                                  // ADC_input_data_s1_agent:rf_source_valid -> ADC_input_data_s1_agent_rsp_fifo:in_valid
	wire  [118:0] adc_input_data_s1_agent_rf_source_data;                                   // ADC_input_data_s1_agent:rf_source_data -> ADC_input_data_s1_agent_rsp_fifo:in_data
	wire          adc_input_data_s1_agent_rf_source_ready;                                  // ADC_input_data_s1_agent_rsp_fifo:in_ready -> ADC_input_data_s1_agent:rf_source_ready
	wire          adc_input_data_s1_agent_rf_source_startofpacket;                          // ADC_input_data_s1_agent:rf_source_startofpacket -> ADC_input_data_s1_agent_rsp_fifo:in_startofpacket
	wire          adc_input_data_s1_agent_rf_source_endofpacket;                            // ADC_input_data_s1_agent:rf_source_endofpacket -> ADC_input_data_s1_agent_rsp_fifo:in_endofpacket
	wire          adc_input_data_s1_agent_rsp_fifo_out_valid;                               // ADC_input_data_s1_agent_rsp_fifo:out_valid -> ADC_input_data_s1_agent:rf_sink_valid
	wire  [118:0] adc_input_data_s1_agent_rsp_fifo_out_data;                                // ADC_input_data_s1_agent_rsp_fifo:out_data -> ADC_input_data_s1_agent:rf_sink_data
	wire          adc_input_data_s1_agent_rsp_fifo_out_ready;                               // ADC_input_data_s1_agent:rf_sink_ready -> ADC_input_data_s1_agent_rsp_fifo:out_ready
	wire          adc_input_data_s1_agent_rsp_fifo_out_startofpacket;                       // ADC_input_data_s1_agent_rsp_fifo:out_startofpacket -> ADC_input_data_s1_agent:rf_sink_startofpacket
	wire          adc_input_data_s1_agent_rsp_fifo_out_endofpacket;                         // ADC_input_data_s1_agent_rsp_fifo:out_endofpacket -> ADC_input_data_s1_agent:rf_sink_endofpacket
	wire          adc_input_data_s1_agent_rdata_fifo_src_valid;                             // ADC_input_data_s1_agent:rdata_fifo_src_valid -> ADC_input_data_s1_agent_rdata_fifo:in_valid
	wire   [33:0] adc_input_data_s1_agent_rdata_fifo_src_data;                              // ADC_input_data_s1_agent:rdata_fifo_src_data -> ADC_input_data_s1_agent_rdata_fifo:in_data
	wire          adc_input_data_s1_agent_rdata_fifo_src_ready;                             // ADC_input_data_s1_agent_rdata_fifo:in_ready -> ADC_input_data_s1_agent:rdata_fifo_src_ready
	wire   [31:0] adc_sel_channel_s1_agent_m0_readdata;                                     // ADC_sel_channel_s1_translator:uav_readdata -> ADC_sel_channel_s1_agent:m0_readdata
	wire          adc_sel_channel_s1_agent_m0_waitrequest;                                  // ADC_sel_channel_s1_translator:uav_waitrequest -> ADC_sel_channel_s1_agent:m0_waitrequest
	wire          adc_sel_channel_s1_agent_m0_debugaccess;                                  // ADC_sel_channel_s1_agent:m0_debugaccess -> ADC_sel_channel_s1_translator:uav_debugaccess
	wire   [20:0] adc_sel_channel_s1_agent_m0_address;                                      // ADC_sel_channel_s1_agent:m0_address -> ADC_sel_channel_s1_translator:uav_address
	wire    [3:0] adc_sel_channel_s1_agent_m0_byteenable;                                   // ADC_sel_channel_s1_agent:m0_byteenable -> ADC_sel_channel_s1_translator:uav_byteenable
	wire          adc_sel_channel_s1_agent_m0_read;                                         // ADC_sel_channel_s1_agent:m0_read -> ADC_sel_channel_s1_translator:uav_read
	wire          adc_sel_channel_s1_agent_m0_readdatavalid;                                // ADC_sel_channel_s1_translator:uav_readdatavalid -> ADC_sel_channel_s1_agent:m0_readdatavalid
	wire          adc_sel_channel_s1_agent_m0_lock;                                         // ADC_sel_channel_s1_agent:m0_lock -> ADC_sel_channel_s1_translator:uav_lock
	wire   [31:0] adc_sel_channel_s1_agent_m0_writedata;                                    // ADC_sel_channel_s1_agent:m0_writedata -> ADC_sel_channel_s1_translator:uav_writedata
	wire          adc_sel_channel_s1_agent_m0_write;                                        // ADC_sel_channel_s1_agent:m0_write -> ADC_sel_channel_s1_translator:uav_write
	wire    [2:0] adc_sel_channel_s1_agent_m0_burstcount;                                   // ADC_sel_channel_s1_agent:m0_burstcount -> ADC_sel_channel_s1_translator:uav_burstcount
	wire          adc_sel_channel_s1_agent_rf_source_valid;                                 // ADC_sel_channel_s1_agent:rf_source_valid -> ADC_sel_channel_s1_agent_rsp_fifo:in_valid
	wire  [118:0] adc_sel_channel_s1_agent_rf_source_data;                                  // ADC_sel_channel_s1_agent:rf_source_data -> ADC_sel_channel_s1_agent_rsp_fifo:in_data
	wire          adc_sel_channel_s1_agent_rf_source_ready;                                 // ADC_sel_channel_s1_agent_rsp_fifo:in_ready -> ADC_sel_channel_s1_agent:rf_source_ready
	wire          adc_sel_channel_s1_agent_rf_source_startofpacket;                         // ADC_sel_channel_s1_agent:rf_source_startofpacket -> ADC_sel_channel_s1_agent_rsp_fifo:in_startofpacket
	wire          adc_sel_channel_s1_agent_rf_source_endofpacket;                           // ADC_sel_channel_s1_agent:rf_source_endofpacket -> ADC_sel_channel_s1_agent_rsp_fifo:in_endofpacket
	wire          adc_sel_channel_s1_agent_rsp_fifo_out_valid;                              // ADC_sel_channel_s1_agent_rsp_fifo:out_valid -> ADC_sel_channel_s1_agent:rf_sink_valid
	wire  [118:0] adc_sel_channel_s1_agent_rsp_fifo_out_data;                               // ADC_sel_channel_s1_agent_rsp_fifo:out_data -> ADC_sel_channel_s1_agent:rf_sink_data
	wire          adc_sel_channel_s1_agent_rsp_fifo_out_ready;                              // ADC_sel_channel_s1_agent:rf_sink_ready -> ADC_sel_channel_s1_agent_rsp_fifo:out_ready
	wire          adc_sel_channel_s1_agent_rsp_fifo_out_startofpacket;                      // ADC_sel_channel_s1_agent_rsp_fifo:out_startofpacket -> ADC_sel_channel_s1_agent:rf_sink_startofpacket
	wire          adc_sel_channel_s1_agent_rsp_fifo_out_endofpacket;                        // ADC_sel_channel_s1_agent_rsp_fifo:out_endofpacket -> ADC_sel_channel_s1_agent:rf_sink_endofpacket
	wire          adc_sel_channel_s1_agent_rdata_fifo_src_valid;                            // ADC_sel_channel_s1_agent:rdata_fifo_src_valid -> ADC_sel_channel_s1_agent_rdata_fifo:in_valid
	wire   [33:0] adc_sel_channel_s1_agent_rdata_fifo_src_data;                             // ADC_sel_channel_s1_agent:rdata_fifo_src_data -> ADC_sel_channel_s1_agent_rdata_fifo:in_data
	wire          adc_sel_channel_s1_agent_rdata_fifo_src_ready;                            // ADC_sel_channel_s1_agent_rdata_fifo:in_ready -> ADC_sel_channel_s1_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                             // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                              // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                             // router:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                     // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                       // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                              // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                               // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                              // router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                      // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                        // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rp_valid;                                  // sysid_qsys_control_slave_agent:rp_valid -> router_002:sink_valid
	wire  [117:0] sysid_qsys_control_slave_agent_rp_data;                                   // sysid_qsys_control_slave_agent:rp_data -> router_002:sink_data
	wire          sysid_qsys_control_slave_agent_rp_ready;                                  // router_002:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire          sysid_qsys_control_slave_agent_rp_startofpacket;                          // sysid_qsys_control_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rp_endofpacket;                            // sysid_qsys_control_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                     // router_002:src_valid -> rsp_demux:sink_valid
	wire  [117:0] router_002_src_data;                                                      // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                     // rsp_demux:sink_ready -> router_002:src_ready
	wire   [13:0] router_002_src_channel;                                                   // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                             // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                               // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          led_pio_s1_agent_rp_valid;                                                // led_pio_s1_agent:rp_valid -> router_003:sink_valid
	wire  [117:0] led_pio_s1_agent_rp_data;                                                 // led_pio_s1_agent:rp_data -> router_003:sink_data
	wire          led_pio_s1_agent_rp_ready;                                                // router_003:sink_ready -> led_pio_s1_agent:rp_ready
	wire          led_pio_s1_agent_rp_startofpacket;                                        // led_pio_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          led_pio_s1_agent_rp_endofpacket;                                          // led_pio_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                     // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [117:0] router_003_src_data;                                                      // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                     // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [13:0] router_003_src_channel;                                                   // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                             // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                               // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          dipsw_pio_s1_agent_rp_valid;                                              // dipsw_pio_s1_agent:rp_valid -> router_004:sink_valid
	wire  [117:0] dipsw_pio_s1_agent_rp_data;                                               // dipsw_pio_s1_agent:rp_data -> router_004:sink_data
	wire          dipsw_pio_s1_agent_rp_ready;                                              // router_004:sink_ready -> dipsw_pio_s1_agent:rp_ready
	wire          dipsw_pio_s1_agent_rp_startofpacket;                                      // dipsw_pio_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          dipsw_pio_s1_agent_rp_endofpacket;                                        // dipsw_pio_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                     // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [117:0] router_004_src_data;                                                      // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                     // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [13:0] router_004_src_channel;                                                   // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                             // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                               // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          button_pio_s1_agent_rp_valid;                                             // button_pio_s1_agent:rp_valid -> router_005:sink_valid
	wire  [117:0] button_pio_s1_agent_rp_data;                                              // button_pio_s1_agent:rp_data -> router_005:sink_data
	wire          button_pio_s1_agent_rp_ready;                                             // router_005:sink_ready -> button_pio_s1_agent:rp_ready
	wire          button_pio_s1_agent_rp_startofpacket;                                     // button_pio_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          button_pio_s1_agent_rp_endofpacket;                                       // button_pio_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                     // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [117:0] router_005_src_data;                                                      // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                     // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [13:0] router_005_src_channel;                                                   // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                             // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                               // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          mosfet_control_s1_agent_rp_valid;                                         // Mosfet_control_s1_agent:rp_valid -> router_006:sink_valid
	wire  [117:0] mosfet_control_s1_agent_rp_data;                                          // Mosfet_control_s1_agent:rp_data -> router_006:sink_data
	wire          mosfet_control_s1_agent_rp_ready;                                         // router_006:sink_ready -> Mosfet_control_s1_agent:rp_ready
	wire          mosfet_control_s1_agent_rp_startofpacket;                                 // Mosfet_control_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          mosfet_control_s1_agent_rp_endofpacket;                                   // Mosfet_control_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                     // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [117:0] router_006_src_data;                                                      // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                     // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [13:0] router_006_src_channel;                                                   // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                             // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                               // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          mosfet_en_s1_agent_rp_valid;                                              // Mosfet_en_s1_agent:rp_valid -> router_007:sink_valid
	wire  [117:0] mosfet_en_s1_agent_rp_data;                                               // Mosfet_en_s1_agent:rp_data -> router_007:sink_data
	wire          mosfet_en_s1_agent_rp_ready;                                              // router_007:sink_ready -> Mosfet_en_s1_agent:rp_ready
	wire          mosfet_en_s1_agent_rp_startofpacket;                                      // Mosfet_en_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          mosfet_en_s1_agent_rp_endofpacket;                                        // Mosfet_en_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                     // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [117:0] router_007_src_data;                                                      // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                     // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [13:0] router_007_src_channel;                                                   // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                             // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                               // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          valves_control_s1_agent_rp_valid;                                         // Valves_control_s1_agent:rp_valid -> router_008:sink_valid
	wire  [117:0] valves_control_s1_agent_rp_data;                                          // Valves_control_s1_agent:rp_data -> router_008:sink_data
	wire          valves_control_s1_agent_rp_ready;                                         // router_008:sink_ready -> Valves_control_s1_agent:rp_ready
	wire          valves_control_s1_agent_rp_startofpacket;                                 // Valves_control_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          valves_control_s1_agent_rp_endofpacket;                                   // Valves_control_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                     // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [117:0] router_008_src_data;                                                      // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                     // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [13:0] router_008_src_channel;                                                   // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                             // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                               // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          electro_control_s1_agent_rp_valid;                                        // Electro_control_s1_agent:rp_valid -> router_009:sink_valid
	wire  [117:0] electro_control_s1_agent_rp_data;                                         // Electro_control_s1_agent:rp_data -> router_009:sink_data
	wire          electro_control_s1_agent_rp_ready;                                        // router_009:sink_ready -> Electro_control_s1_agent:rp_ready
	wire          electro_control_s1_agent_rp_startofpacket;                                // Electro_control_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          electro_control_s1_agent_rp_endofpacket;                                  // Electro_control_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                     // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [117:0] router_009_src_data;                                                      // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                     // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [13:0] router_009_src_channel;                                                   // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                             // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                               // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          alarm_div_32_s1_agent_rp_valid;                                           // Alarm_div_32_s1_agent:rp_valid -> router_010:sink_valid
	wire  [117:0] alarm_div_32_s1_agent_rp_data;                                            // Alarm_div_32_s1_agent:rp_data -> router_010:sink_data
	wire          alarm_div_32_s1_agent_rp_ready;                                           // router_010:sink_ready -> Alarm_div_32_s1_agent:rp_ready
	wire          alarm_div_32_s1_agent_rp_startofpacket;                                   // Alarm_div_32_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          alarm_div_32_s1_agent_rp_endofpacket;                                     // Alarm_div_32_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                     // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [117:0] router_010_src_data;                                                      // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                     // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [13:0] router_010_src_channel;                                                   // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                             // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                               // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          buttons_inicio_emer_final_control_s1_agent_rp_valid;                      // Buttons_Inicio_Emer_Final_control_s1_agent:rp_valid -> router_011:sink_valid
	wire  [117:0] buttons_inicio_emer_final_control_s1_agent_rp_data;                       // Buttons_Inicio_Emer_Final_control_s1_agent:rp_data -> router_011:sink_data
	wire          buttons_inicio_emer_final_control_s1_agent_rp_ready;                      // router_011:sink_ready -> Buttons_Inicio_Emer_Final_control_s1_agent:rp_ready
	wire          buttons_inicio_emer_final_control_s1_agent_rp_startofpacket;              // Buttons_Inicio_Emer_Final_control_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          buttons_inicio_emer_final_control_s1_agent_rp_endofpacket;                // Buttons_Inicio_Emer_Final_control_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                     // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [117:0] router_011_src_data;                                                      // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                     // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [13:0] router_011_src_channel;                                                   // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                             // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                               // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          max6675_temp_s1_agent_rp_valid;                                           // Max6675_Temp_s1_agent:rp_valid -> router_012:sink_valid
	wire  [117:0] max6675_temp_s1_agent_rp_data;                                            // Max6675_Temp_s1_agent:rp_data -> router_012:sink_data
	wire          max6675_temp_s1_agent_rp_ready;                                           // router_012:sink_ready -> Max6675_Temp_s1_agent:rp_ready
	wire          max6675_temp_s1_agent_rp_startofpacket;                                   // Max6675_Temp_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          max6675_temp_s1_agent_rp_endofpacket;                                     // Max6675_Temp_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                     // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [117:0] router_012_src_data;                                                      // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                     // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [13:0] router_012_src_channel;                                                   // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                             // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                               // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          sel_max667_s1_agent_rp_valid;                                             // Sel_Max667_s1_agent:rp_valid -> router_013:sink_valid
	wire  [117:0] sel_max667_s1_agent_rp_data;                                              // Sel_Max667_s1_agent:rp_data -> router_013:sink_data
	wire          sel_max667_s1_agent_rp_ready;                                             // router_013:sink_ready -> Sel_Max667_s1_agent:rp_ready
	wire          sel_max667_s1_agent_rp_startofpacket;                                     // Sel_Max667_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          sel_max667_s1_agent_rp_endofpacket;                                       // Sel_Max667_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                     // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [117:0] router_013_src_data;                                                      // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                     // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [13:0] router_013_src_channel;                                                   // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                             // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                               // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          adc_input_data_s1_agent_rp_valid;                                         // ADC_input_data_s1_agent:rp_valid -> router_014:sink_valid
	wire  [117:0] adc_input_data_s1_agent_rp_data;                                          // ADC_input_data_s1_agent:rp_data -> router_014:sink_data
	wire          adc_input_data_s1_agent_rp_ready;                                         // router_014:sink_ready -> ADC_input_data_s1_agent:rp_ready
	wire          adc_input_data_s1_agent_rp_startofpacket;                                 // ADC_input_data_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          adc_input_data_s1_agent_rp_endofpacket;                                   // ADC_input_data_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                     // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [117:0] router_014_src_data;                                                      // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                     // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [13:0] router_014_src_channel;                                                   // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                             // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                               // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          adc_sel_channel_s1_agent_rp_valid;                                        // ADC_sel_channel_s1_agent:rp_valid -> router_015:sink_valid
	wire  [117:0] adc_sel_channel_s1_agent_rp_data;                                         // ADC_sel_channel_s1_agent:rp_data -> router_015:sink_data
	wire          adc_sel_channel_s1_agent_rp_ready;                                        // router_015:sink_ready -> ADC_sel_channel_s1_agent:rp_ready
	wire          adc_sel_channel_s1_agent_rp_startofpacket;                                // ADC_sel_channel_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          adc_sel_channel_s1_agent_rp_endofpacket;                                  // ADC_sel_channel_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                     // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [117:0] router_015_src_data;                                                      // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                     // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [13:0] router_015_src_channel;                                                   // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                             // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                               // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          router_src_valid;                                                         // router:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [117:0] router_src_data;                                                          // router:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                         // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [13:0] router_src_channel;                                                       // router:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                 // router:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                   // router:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [117:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                          // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                         // cmd_demux:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [13:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                       // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                 // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                   // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                        // rsp_mux:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [117:0] rsp_mux_src_data;                                                         // rsp_mux:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                        // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [13:0] rsp_mux_src_channel;                                                      // rsp_mux:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                // rsp_mux:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                  // rsp_mux:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                         // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                          // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                         // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [13:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                       // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                 // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                   // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                     // router_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [117:0] router_001_src_data;                                                      // router_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                     // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [13:0] router_001_src_channel;                                                   // router_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                             // router_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                               // router_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [117:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                          // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                         // cmd_demux_001:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [13:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                       // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                 // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                   // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                    // rsp_mux_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [117:0] rsp_mux_001_src_data;                                                     // rsp_mux_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                    // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [13:0] rsp_mux_001_src_channel;                                                  // rsp_mux_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                            // rsp_mux_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                              // rsp_mux_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                         // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                          // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                         // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [13:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                       // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                 // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                   // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                        // cmd_mux:src_valid -> sysid_qsys_control_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_src_data;                                                         // cmd_mux:src_data -> sysid_qsys_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                        // sysid_qsys_control_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [13:0] cmd_mux_src_channel;                                                      // cmd_mux:src_channel -> sysid_qsys_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                // cmd_mux:src_startofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                  // cmd_mux:src_endofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_valid;                     // sysid_qsys_control_slave_burst_adapter:source0_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [117:0] sysid_qsys_control_slave_burst_adapter_source0_data;                      // sysid_qsys_control_slave_burst_adapter:source0_data -> sysid_qsys_control_slave_agent:cp_data
	wire          sysid_qsys_control_slave_burst_adapter_source0_ready;                     // sysid_qsys_control_slave_agent:cp_ready -> sysid_qsys_control_slave_burst_adapter:source0_ready
	wire   [13:0] sysid_qsys_control_slave_burst_adapter_source0_channel;                   // sysid_qsys_control_slave_burst_adapter:source0_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire          sysid_qsys_control_slave_burst_adapter_source0_startofpacket;             // sysid_qsys_control_slave_burst_adapter:source0_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_endofpacket;               // sysid_qsys_control_slave_burst_adapter:source0_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                    // cmd_mux_001:src_valid -> led_pio_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_001_src_data;                                                     // cmd_mux_001:src_data -> led_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                    // led_pio_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [13:0] cmd_mux_001_src_channel;                                                  // cmd_mux_001:src_channel -> led_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                            // cmd_mux_001:src_startofpacket -> led_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                              // cmd_mux_001:src_endofpacket -> led_pio_s1_burst_adapter:sink0_endofpacket
	wire          led_pio_s1_burst_adapter_source0_valid;                                   // led_pio_s1_burst_adapter:source0_valid -> led_pio_s1_agent:cp_valid
	wire  [117:0] led_pio_s1_burst_adapter_source0_data;                                    // led_pio_s1_burst_adapter:source0_data -> led_pio_s1_agent:cp_data
	wire          led_pio_s1_burst_adapter_source0_ready;                                   // led_pio_s1_agent:cp_ready -> led_pio_s1_burst_adapter:source0_ready
	wire   [13:0] led_pio_s1_burst_adapter_source0_channel;                                 // led_pio_s1_burst_adapter:source0_channel -> led_pio_s1_agent:cp_channel
	wire          led_pio_s1_burst_adapter_source0_startofpacket;                           // led_pio_s1_burst_adapter:source0_startofpacket -> led_pio_s1_agent:cp_startofpacket
	wire          led_pio_s1_burst_adapter_source0_endofpacket;                             // led_pio_s1_burst_adapter:source0_endofpacket -> led_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                    // cmd_mux_002:src_valid -> dipsw_pio_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_002_src_data;                                                     // cmd_mux_002:src_data -> dipsw_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                    // dipsw_pio_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [13:0] cmd_mux_002_src_channel;                                                  // cmd_mux_002:src_channel -> dipsw_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                            // cmd_mux_002:src_startofpacket -> dipsw_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                              // cmd_mux_002:src_endofpacket -> dipsw_pio_s1_burst_adapter:sink0_endofpacket
	wire          dipsw_pio_s1_burst_adapter_source0_valid;                                 // dipsw_pio_s1_burst_adapter:source0_valid -> dipsw_pio_s1_agent:cp_valid
	wire  [117:0] dipsw_pio_s1_burst_adapter_source0_data;                                  // dipsw_pio_s1_burst_adapter:source0_data -> dipsw_pio_s1_agent:cp_data
	wire          dipsw_pio_s1_burst_adapter_source0_ready;                                 // dipsw_pio_s1_agent:cp_ready -> dipsw_pio_s1_burst_adapter:source0_ready
	wire   [13:0] dipsw_pio_s1_burst_adapter_source0_channel;                               // dipsw_pio_s1_burst_adapter:source0_channel -> dipsw_pio_s1_agent:cp_channel
	wire          dipsw_pio_s1_burst_adapter_source0_startofpacket;                         // dipsw_pio_s1_burst_adapter:source0_startofpacket -> dipsw_pio_s1_agent:cp_startofpacket
	wire          dipsw_pio_s1_burst_adapter_source0_endofpacket;                           // dipsw_pio_s1_burst_adapter:source0_endofpacket -> dipsw_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                    // cmd_mux_003:src_valid -> button_pio_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_003_src_data;                                                     // cmd_mux_003:src_data -> button_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                    // button_pio_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [13:0] cmd_mux_003_src_channel;                                                  // cmd_mux_003:src_channel -> button_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                            // cmd_mux_003:src_startofpacket -> button_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                              // cmd_mux_003:src_endofpacket -> button_pio_s1_burst_adapter:sink0_endofpacket
	wire          button_pio_s1_burst_adapter_source0_valid;                                // button_pio_s1_burst_adapter:source0_valid -> button_pio_s1_agent:cp_valid
	wire  [117:0] button_pio_s1_burst_adapter_source0_data;                                 // button_pio_s1_burst_adapter:source0_data -> button_pio_s1_agent:cp_data
	wire          button_pio_s1_burst_adapter_source0_ready;                                // button_pio_s1_agent:cp_ready -> button_pio_s1_burst_adapter:source0_ready
	wire   [13:0] button_pio_s1_burst_adapter_source0_channel;                              // button_pio_s1_burst_adapter:source0_channel -> button_pio_s1_agent:cp_channel
	wire          button_pio_s1_burst_adapter_source0_startofpacket;                        // button_pio_s1_burst_adapter:source0_startofpacket -> button_pio_s1_agent:cp_startofpacket
	wire          button_pio_s1_burst_adapter_source0_endofpacket;                          // button_pio_s1_burst_adapter:source0_endofpacket -> button_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                    // cmd_mux_004:src_valid -> Mosfet_control_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_004_src_data;                                                     // cmd_mux_004:src_data -> Mosfet_control_s1_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                    // Mosfet_control_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [13:0] cmd_mux_004_src_channel;                                                  // cmd_mux_004:src_channel -> Mosfet_control_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                            // cmd_mux_004:src_startofpacket -> Mosfet_control_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                              // cmd_mux_004:src_endofpacket -> Mosfet_control_s1_burst_adapter:sink0_endofpacket
	wire          mosfet_control_s1_burst_adapter_source0_valid;                            // Mosfet_control_s1_burst_adapter:source0_valid -> Mosfet_control_s1_agent:cp_valid
	wire  [117:0] mosfet_control_s1_burst_adapter_source0_data;                             // Mosfet_control_s1_burst_adapter:source0_data -> Mosfet_control_s1_agent:cp_data
	wire          mosfet_control_s1_burst_adapter_source0_ready;                            // Mosfet_control_s1_agent:cp_ready -> Mosfet_control_s1_burst_adapter:source0_ready
	wire   [13:0] mosfet_control_s1_burst_adapter_source0_channel;                          // Mosfet_control_s1_burst_adapter:source0_channel -> Mosfet_control_s1_agent:cp_channel
	wire          mosfet_control_s1_burst_adapter_source0_startofpacket;                    // Mosfet_control_s1_burst_adapter:source0_startofpacket -> Mosfet_control_s1_agent:cp_startofpacket
	wire          mosfet_control_s1_burst_adapter_source0_endofpacket;                      // Mosfet_control_s1_burst_adapter:source0_endofpacket -> Mosfet_control_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                    // cmd_mux_005:src_valid -> Mosfet_en_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_005_src_data;                                                     // cmd_mux_005:src_data -> Mosfet_en_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                    // Mosfet_en_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [13:0] cmd_mux_005_src_channel;                                                  // cmd_mux_005:src_channel -> Mosfet_en_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                            // cmd_mux_005:src_startofpacket -> Mosfet_en_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                              // cmd_mux_005:src_endofpacket -> Mosfet_en_s1_burst_adapter:sink0_endofpacket
	wire          mosfet_en_s1_burst_adapter_source0_valid;                                 // Mosfet_en_s1_burst_adapter:source0_valid -> Mosfet_en_s1_agent:cp_valid
	wire  [117:0] mosfet_en_s1_burst_adapter_source0_data;                                  // Mosfet_en_s1_burst_adapter:source0_data -> Mosfet_en_s1_agent:cp_data
	wire          mosfet_en_s1_burst_adapter_source0_ready;                                 // Mosfet_en_s1_agent:cp_ready -> Mosfet_en_s1_burst_adapter:source0_ready
	wire   [13:0] mosfet_en_s1_burst_adapter_source0_channel;                               // Mosfet_en_s1_burst_adapter:source0_channel -> Mosfet_en_s1_agent:cp_channel
	wire          mosfet_en_s1_burst_adapter_source0_startofpacket;                         // Mosfet_en_s1_burst_adapter:source0_startofpacket -> Mosfet_en_s1_agent:cp_startofpacket
	wire          mosfet_en_s1_burst_adapter_source0_endofpacket;                           // Mosfet_en_s1_burst_adapter:source0_endofpacket -> Mosfet_en_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                    // cmd_mux_006:src_valid -> Valves_control_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_006_src_data;                                                     // cmd_mux_006:src_data -> Valves_control_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                    // Valves_control_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [13:0] cmd_mux_006_src_channel;                                                  // cmd_mux_006:src_channel -> Valves_control_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                            // cmd_mux_006:src_startofpacket -> Valves_control_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                              // cmd_mux_006:src_endofpacket -> Valves_control_s1_burst_adapter:sink0_endofpacket
	wire          valves_control_s1_burst_adapter_source0_valid;                            // Valves_control_s1_burst_adapter:source0_valid -> Valves_control_s1_agent:cp_valid
	wire  [117:0] valves_control_s1_burst_adapter_source0_data;                             // Valves_control_s1_burst_adapter:source0_data -> Valves_control_s1_agent:cp_data
	wire          valves_control_s1_burst_adapter_source0_ready;                            // Valves_control_s1_agent:cp_ready -> Valves_control_s1_burst_adapter:source0_ready
	wire   [13:0] valves_control_s1_burst_adapter_source0_channel;                          // Valves_control_s1_burst_adapter:source0_channel -> Valves_control_s1_agent:cp_channel
	wire          valves_control_s1_burst_adapter_source0_startofpacket;                    // Valves_control_s1_burst_adapter:source0_startofpacket -> Valves_control_s1_agent:cp_startofpacket
	wire          valves_control_s1_burst_adapter_source0_endofpacket;                      // Valves_control_s1_burst_adapter:source0_endofpacket -> Valves_control_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                    // cmd_mux_007:src_valid -> Electro_control_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_007_src_data;                                                     // cmd_mux_007:src_data -> Electro_control_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                    // Electro_control_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [13:0] cmd_mux_007_src_channel;                                                  // cmd_mux_007:src_channel -> Electro_control_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                            // cmd_mux_007:src_startofpacket -> Electro_control_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                              // cmd_mux_007:src_endofpacket -> Electro_control_s1_burst_adapter:sink0_endofpacket
	wire          electro_control_s1_burst_adapter_source0_valid;                           // Electro_control_s1_burst_adapter:source0_valid -> Electro_control_s1_agent:cp_valid
	wire  [117:0] electro_control_s1_burst_adapter_source0_data;                            // Electro_control_s1_burst_adapter:source0_data -> Electro_control_s1_agent:cp_data
	wire          electro_control_s1_burst_adapter_source0_ready;                           // Electro_control_s1_agent:cp_ready -> Electro_control_s1_burst_adapter:source0_ready
	wire   [13:0] electro_control_s1_burst_adapter_source0_channel;                         // Electro_control_s1_burst_adapter:source0_channel -> Electro_control_s1_agent:cp_channel
	wire          electro_control_s1_burst_adapter_source0_startofpacket;                   // Electro_control_s1_burst_adapter:source0_startofpacket -> Electro_control_s1_agent:cp_startofpacket
	wire          electro_control_s1_burst_adapter_source0_endofpacket;                     // Electro_control_s1_burst_adapter:source0_endofpacket -> Electro_control_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                    // cmd_mux_008:src_valid -> Alarm_div_32_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_008_src_data;                                                     // cmd_mux_008:src_data -> Alarm_div_32_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                    // Alarm_div_32_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [13:0] cmd_mux_008_src_channel;                                                  // cmd_mux_008:src_channel -> Alarm_div_32_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                            // cmd_mux_008:src_startofpacket -> Alarm_div_32_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                              // cmd_mux_008:src_endofpacket -> Alarm_div_32_s1_burst_adapter:sink0_endofpacket
	wire          alarm_div_32_s1_burst_adapter_source0_valid;                              // Alarm_div_32_s1_burst_adapter:source0_valid -> Alarm_div_32_s1_agent:cp_valid
	wire  [117:0] alarm_div_32_s1_burst_adapter_source0_data;                               // Alarm_div_32_s1_burst_adapter:source0_data -> Alarm_div_32_s1_agent:cp_data
	wire          alarm_div_32_s1_burst_adapter_source0_ready;                              // Alarm_div_32_s1_agent:cp_ready -> Alarm_div_32_s1_burst_adapter:source0_ready
	wire   [13:0] alarm_div_32_s1_burst_adapter_source0_channel;                            // Alarm_div_32_s1_burst_adapter:source0_channel -> Alarm_div_32_s1_agent:cp_channel
	wire          alarm_div_32_s1_burst_adapter_source0_startofpacket;                      // Alarm_div_32_s1_burst_adapter:source0_startofpacket -> Alarm_div_32_s1_agent:cp_startofpacket
	wire          alarm_div_32_s1_burst_adapter_source0_endofpacket;                        // Alarm_div_32_s1_burst_adapter:source0_endofpacket -> Alarm_div_32_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                    // cmd_mux_009:src_valid -> Buttons_Inicio_Emer_Final_control_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_009_src_data;                                                     // cmd_mux_009:src_data -> Buttons_Inicio_Emer_Final_control_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                    // Buttons_Inicio_Emer_Final_control_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [13:0] cmd_mux_009_src_channel;                                                  // cmd_mux_009:src_channel -> Buttons_Inicio_Emer_Final_control_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                            // cmd_mux_009:src_startofpacket -> Buttons_Inicio_Emer_Final_control_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                              // cmd_mux_009:src_endofpacket -> Buttons_Inicio_Emer_Final_control_s1_burst_adapter:sink0_endofpacket
	wire          buttons_inicio_emer_final_control_s1_burst_adapter_source0_valid;         // Buttons_Inicio_Emer_Final_control_s1_burst_adapter:source0_valid -> Buttons_Inicio_Emer_Final_control_s1_agent:cp_valid
	wire  [117:0] buttons_inicio_emer_final_control_s1_burst_adapter_source0_data;          // Buttons_Inicio_Emer_Final_control_s1_burst_adapter:source0_data -> Buttons_Inicio_Emer_Final_control_s1_agent:cp_data
	wire          buttons_inicio_emer_final_control_s1_burst_adapter_source0_ready;         // Buttons_Inicio_Emer_Final_control_s1_agent:cp_ready -> Buttons_Inicio_Emer_Final_control_s1_burst_adapter:source0_ready
	wire   [13:0] buttons_inicio_emer_final_control_s1_burst_adapter_source0_channel;       // Buttons_Inicio_Emer_Final_control_s1_burst_adapter:source0_channel -> Buttons_Inicio_Emer_Final_control_s1_agent:cp_channel
	wire          buttons_inicio_emer_final_control_s1_burst_adapter_source0_startofpacket; // Buttons_Inicio_Emer_Final_control_s1_burst_adapter:source0_startofpacket -> Buttons_Inicio_Emer_Final_control_s1_agent:cp_startofpacket
	wire          buttons_inicio_emer_final_control_s1_burst_adapter_source0_endofpacket;   // Buttons_Inicio_Emer_Final_control_s1_burst_adapter:source0_endofpacket -> Buttons_Inicio_Emer_Final_control_s1_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                    // cmd_mux_010:src_valid -> Max6675_Temp_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_010_src_data;                                                     // cmd_mux_010:src_data -> Max6675_Temp_s1_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                    // Max6675_Temp_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [13:0] cmd_mux_010_src_channel;                                                  // cmd_mux_010:src_channel -> Max6675_Temp_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                            // cmd_mux_010:src_startofpacket -> Max6675_Temp_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                              // cmd_mux_010:src_endofpacket -> Max6675_Temp_s1_burst_adapter:sink0_endofpacket
	wire          max6675_temp_s1_burst_adapter_source0_valid;                              // Max6675_Temp_s1_burst_adapter:source0_valid -> Max6675_Temp_s1_agent:cp_valid
	wire  [117:0] max6675_temp_s1_burst_adapter_source0_data;                               // Max6675_Temp_s1_burst_adapter:source0_data -> Max6675_Temp_s1_agent:cp_data
	wire          max6675_temp_s1_burst_adapter_source0_ready;                              // Max6675_Temp_s1_agent:cp_ready -> Max6675_Temp_s1_burst_adapter:source0_ready
	wire   [13:0] max6675_temp_s1_burst_adapter_source0_channel;                            // Max6675_Temp_s1_burst_adapter:source0_channel -> Max6675_Temp_s1_agent:cp_channel
	wire          max6675_temp_s1_burst_adapter_source0_startofpacket;                      // Max6675_Temp_s1_burst_adapter:source0_startofpacket -> Max6675_Temp_s1_agent:cp_startofpacket
	wire          max6675_temp_s1_burst_adapter_source0_endofpacket;                        // Max6675_Temp_s1_burst_adapter:source0_endofpacket -> Max6675_Temp_s1_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                    // cmd_mux_011:src_valid -> Sel_Max667_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_011_src_data;                                                     // cmd_mux_011:src_data -> Sel_Max667_s1_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                    // Sel_Max667_s1_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [13:0] cmd_mux_011_src_channel;                                                  // cmd_mux_011:src_channel -> Sel_Max667_s1_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                            // cmd_mux_011:src_startofpacket -> Sel_Max667_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                              // cmd_mux_011:src_endofpacket -> Sel_Max667_s1_burst_adapter:sink0_endofpacket
	wire          sel_max667_s1_burst_adapter_source0_valid;                                // Sel_Max667_s1_burst_adapter:source0_valid -> Sel_Max667_s1_agent:cp_valid
	wire  [117:0] sel_max667_s1_burst_adapter_source0_data;                                 // Sel_Max667_s1_burst_adapter:source0_data -> Sel_Max667_s1_agent:cp_data
	wire          sel_max667_s1_burst_adapter_source0_ready;                                // Sel_Max667_s1_agent:cp_ready -> Sel_Max667_s1_burst_adapter:source0_ready
	wire   [13:0] sel_max667_s1_burst_adapter_source0_channel;                              // Sel_Max667_s1_burst_adapter:source0_channel -> Sel_Max667_s1_agent:cp_channel
	wire          sel_max667_s1_burst_adapter_source0_startofpacket;                        // Sel_Max667_s1_burst_adapter:source0_startofpacket -> Sel_Max667_s1_agent:cp_startofpacket
	wire          sel_max667_s1_burst_adapter_source0_endofpacket;                          // Sel_Max667_s1_burst_adapter:source0_endofpacket -> Sel_Max667_s1_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                    // cmd_mux_012:src_valid -> ADC_input_data_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_012_src_data;                                                     // cmd_mux_012:src_data -> ADC_input_data_s1_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                    // ADC_input_data_s1_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [13:0] cmd_mux_012_src_channel;                                                  // cmd_mux_012:src_channel -> ADC_input_data_s1_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                            // cmd_mux_012:src_startofpacket -> ADC_input_data_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                              // cmd_mux_012:src_endofpacket -> ADC_input_data_s1_burst_adapter:sink0_endofpacket
	wire          adc_input_data_s1_burst_adapter_source0_valid;                            // ADC_input_data_s1_burst_adapter:source0_valid -> ADC_input_data_s1_agent:cp_valid
	wire  [117:0] adc_input_data_s1_burst_adapter_source0_data;                             // ADC_input_data_s1_burst_adapter:source0_data -> ADC_input_data_s1_agent:cp_data
	wire          adc_input_data_s1_burst_adapter_source0_ready;                            // ADC_input_data_s1_agent:cp_ready -> ADC_input_data_s1_burst_adapter:source0_ready
	wire   [13:0] adc_input_data_s1_burst_adapter_source0_channel;                          // ADC_input_data_s1_burst_adapter:source0_channel -> ADC_input_data_s1_agent:cp_channel
	wire          adc_input_data_s1_burst_adapter_source0_startofpacket;                    // ADC_input_data_s1_burst_adapter:source0_startofpacket -> ADC_input_data_s1_agent:cp_startofpacket
	wire          adc_input_data_s1_burst_adapter_source0_endofpacket;                      // ADC_input_data_s1_burst_adapter:source0_endofpacket -> ADC_input_data_s1_agent:cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                    // cmd_mux_013:src_valid -> ADC_sel_channel_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_013_src_data;                                                     // cmd_mux_013:src_data -> ADC_sel_channel_s1_burst_adapter:sink0_data
	wire          cmd_mux_013_src_ready;                                                    // ADC_sel_channel_s1_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire   [13:0] cmd_mux_013_src_channel;                                                  // cmd_mux_013:src_channel -> ADC_sel_channel_s1_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_startofpacket;                                            // cmd_mux_013:src_startofpacket -> ADC_sel_channel_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                              // cmd_mux_013:src_endofpacket -> ADC_sel_channel_s1_burst_adapter:sink0_endofpacket
	wire          adc_sel_channel_s1_burst_adapter_source0_valid;                           // ADC_sel_channel_s1_burst_adapter:source0_valid -> ADC_sel_channel_s1_agent:cp_valid
	wire  [117:0] adc_sel_channel_s1_burst_adapter_source0_data;                            // ADC_sel_channel_s1_burst_adapter:source0_data -> ADC_sel_channel_s1_agent:cp_data
	wire          adc_sel_channel_s1_burst_adapter_source0_ready;                           // ADC_sel_channel_s1_agent:cp_ready -> ADC_sel_channel_s1_burst_adapter:source0_ready
	wire   [13:0] adc_sel_channel_s1_burst_adapter_source0_channel;                         // ADC_sel_channel_s1_burst_adapter:source0_channel -> ADC_sel_channel_s1_agent:cp_channel
	wire          adc_sel_channel_s1_burst_adapter_source0_startofpacket;                   // ADC_sel_channel_s1_burst_adapter:source0_startofpacket -> ADC_sel_channel_s1_agent:cp_startofpacket
	wire          adc_sel_channel_s1_burst_adapter_source0_endofpacket;                     // ADC_sel_channel_s1_burst_adapter:source0_endofpacket -> ADC_sel_channel_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                     // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [117:0] cmd_demux_src0_data;                                                      // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                     // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [13:0] cmd_demux_src0_channel;                                                   // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                             // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                               // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                     // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [117:0] cmd_demux_src1_data;                                                      // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                     // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [13:0] cmd_demux_src1_channel;                                                   // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                             // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                               // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                     // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [117:0] cmd_demux_src2_data;                                                      // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                     // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [13:0] cmd_demux_src2_channel;                                                   // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                             // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                               // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                     // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [117:0] cmd_demux_src3_data;                                                      // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                     // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [13:0] cmd_demux_src3_channel;                                                   // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                             // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                               // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                     // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [117:0] cmd_demux_src4_data;                                                      // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                     // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [13:0] cmd_demux_src4_channel;                                                   // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                             // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                               // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                     // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [117:0] cmd_demux_src5_data;                                                      // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                     // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [13:0] cmd_demux_src5_channel;                                                   // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                             // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                               // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                     // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [117:0] cmd_demux_src6_data;                                                      // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                     // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [13:0] cmd_demux_src6_channel;                                                   // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                             // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                               // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                     // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [117:0] cmd_demux_src7_data;                                                      // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                     // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [13:0] cmd_demux_src7_channel;                                                   // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                             // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                               // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                     // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [117:0] cmd_demux_src8_data;                                                      // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                     // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [13:0] cmd_demux_src8_channel;                                                   // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                             // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                               // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                     // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [117:0] cmd_demux_src9_data;                                                      // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                     // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [13:0] cmd_demux_src9_channel;                                                   // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                             // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                               // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                    // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [117:0] cmd_demux_src10_data;                                                     // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                    // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [13:0] cmd_demux_src10_channel;                                                  // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                            // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                              // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                    // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [117:0] cmd_demux_src11_data;                                                     // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                    // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [13:0] cmd_demux_src11_channel;                                                  // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                            // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                              // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                    // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [117:0] cmd_demux_src12_data;                                                     // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                    // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [13:0] cmd_demux_src12_channel;                                                  // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                            // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                              // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                    // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [117:0] cmd_demux_src13_data;                                                     // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                    // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [13:0] cmd_demux_src13_channel;                                                  // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                            // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                              // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                 // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [117:0] cmd_demux_001_src0_data;                                                  // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                 // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [13:0] cmd_demux_001_src0_channel;                                               // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                         // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                           // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                 // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [117:0] cmd_demux_001_src1_data;                                                  // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                 // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire   [13:0] cmd_demux_001_src1_channel;                                               // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                         // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                           // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                 // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [117:0] cmd_demux_001_src2_data;                                                  // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                 // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire   [13:0] cmd_demux_001_src2_channel;                                               // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                         // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                           // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                 // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [117:0] cmd_demux_001_src3_data;                                                  // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                                 // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire   [13:0] cmd_demux_001_src3_channel;                                               // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                         // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                           // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                 // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [117:0] cmd_demux_001_src4_data;                                                  // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                                 // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire   [13:0] cmd_demux_001_src4_channel;                                               // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                         // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                           // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                 // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [117:0] cmd_demux_001_src5_data;                                                  // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                                 // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire   [13:0] cmd_demux_001_src5_channel;                                               // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                         // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                           // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                 // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [117:0] cmd_demux_001_src6_data;                                                  // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                                 // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire   [13:0] cmd_demux_001_src6_channel;                                               // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                         // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                           // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                 // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [117:0] cmd_demux_001_src7_data;                                                  // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                                 // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire   [13:0] cmd_demux_001_src7_channel;                                               // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                         // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                           // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                 // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [117:0] cmd_demux_001_src8_data;                                                  // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                                 // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire   [13:0] cmd_demux_001_src8_channel;                                               // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                         // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                           // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                                 // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire  [117:0] cmd_demux_001_src9_data;                                                  // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src9_ready;                                                 // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire   [13:0] cmd_demux_001_src9_channel;                                               // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                                         // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                           // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                                // cmd_demux_001:src10_valid -> cmd_mux_010:sink1_valid
	wire  [117:0] cmd_demux_001_src10_data;                                                 // cmd_demux_001:src10_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src10_ready;                                                // cmd_mux_010:sink1_ready -> cmd_demux_001:src10_ready
	wire   [13:0] cmd_demux_001_src10_channel;                                              // cmd_demux_001:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                                        // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                          // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                                // cmd_demux_001:src11_valid -> cmd_mux_011:sink1_valid
	wire  [117:0] cmd_demux_001_src11_data;                                                 // cmd_demux_001:src11_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src11_ready;                                                // cmd_mux_011:sink1_ready -> cmd_demux_001:src11_ready
	wire   [13:0] cmd_demux_001_src11_channel;                                              // cmd_demux_001:src11_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src11_startofpacket;                                        // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                          // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_001_src12_valid;                                                // cmd_demux_001:src12_valid -> cmd_mux_012:sink1_valid
	wire  [117:0] cmd_demux_001_src12_data;                                                 // cmd_demux_001:src12_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_001_src12_ready;                                                // cmd_mux_012:sink1_ready -> cmd_demux_001:src12_ready
	wire   [13:0] cmd_demux_001_src12_channel;                                              // cmd_demux_001:src12_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_001_src12_startofpacket;                                        // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                          // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_001_src13_valid;                                                // cmd_demux_001:src13_valid -> cmd_mux_013:sink1_valid
	wire  [117:0] cmd_demux_001_src13_data;                                                 // cmd_demux_001:src13_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_001_src13_ready;                                                // cmd_mux_013:sink1_ready -> cmd_demux_001:src13_ready
	wire   [13:0] cmd_demux_001_src13_channel;                                              // cmd_demux_001:src13_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_001_src13_startofpacket;                                        // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                          // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                     // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [117:0] rsp_demux_src0_data;                                                      // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                     // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [13:0] rsp_demux_src0_channel;                                                   // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                             // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                               // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                     // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [117:0] rsp_demux_src1_data;                                                      // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                     // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [13:0] rsp_demux_src1_channel;                                                   // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                             // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                               // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                 // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [117:0] rsp_demux_001_src0_data;                                                  // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                 // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [13:0] rsp_demux_001_src0_channel;                                               // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                         // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                           // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                 // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [117:0] rsp_demux_001_src1_data;                                                  // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                 // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire   [13:0] rsp_demux_001_src1_channel;                                               // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                         // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                           // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                 // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [117:0] rsp_demux_002_src0_data;                                                  // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                 // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [13:0] rsp_demux_002_src0_channel;                                               // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                         // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                           // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                 // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [117:0] rsp_demux_002_src1_data;                                                  // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                 // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire   [13:0] rsp_demux_002_src1_channel;                                               // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                         // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                           // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                 // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [117:0] rsp_demux_003_src0_data;                                                  // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                 // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [13:0] rsp_demux_003_src0_channel;                                               // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                         // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                           // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                 // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [117:0] rsp_demux_003_src1_data;                                                  // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                                 // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire   [13:0] rsp_demux_003_src1_channel;                                               // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                         // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                           // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                 // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [117:0] rsp_demux_004_src0_data;                                                  // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                 // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [13:0] rsp_demux_004_src0_channel;                                               // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                         // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                           // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                 // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [117:0] rsp_demux_004_src1_data;                                                  // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                                 // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire   [13:0] rsp_demux_004_src1_channel;                                               // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                         // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                           // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                 // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [117:0] rsp_demux_005_src0_data;                                                  // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                 // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [13:0] rsp_demux_005_src0_channel;                                               // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                         // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                           // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                 // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [117:0] rsp_demux_005_src1_data;                                                  // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                                 // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire   [13:0] rsp_demux_005_src1_channel;                                               // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                         // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                           // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                 // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [117:0] rsp_demux_006_src0_data;                                                  // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                 // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [13:0] rsp_demux_006_src0_channel;                                               // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                         // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                           // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                 // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [117:0] rsp_demux_006_src1_data;                                                  // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                                 // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire   [13:0] rsp_demux_006_src1_channel;                                               // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                         // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                           // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                 // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [117:0] rsp_demux_007_src0_data;                                                  // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                 // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [13:0] rsp_demux_007_src0_channel;                                               // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                         // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                           // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                 // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [117:0] rsp_demux_007_src1_data;                                                  // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                                 // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire   [13:0] rsp_demux_007_src1_channel;                                               // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                                         // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                           // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                 // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [117:0] rsp_demux_008_src0_data;                                                  // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                 // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [13:0] rsp_demux_008_src0_channel;                                               // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                         // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                           // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                 // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [117:0] rsp_demux_008_src1_data;                                                  // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                                 // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire   [13:0] rsp_demux_008_src1_channel;                                               // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                         // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                           // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                 // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [117:0] rsp_demux_009_src0_data;                                                  // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                 // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [13:0] rsp_demux_009_src0_channel;                                               // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                         // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                           // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                 // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire  [117:0] rsp_demux_009_src1_data;                                                  // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src1_ready;                                                 // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire   [13:0] rsp_demux_009_src1_channel;                                               // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                                         // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                           // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                 // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [117:0] rsp_demux_010_src0_data;                                                  // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                 // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [13:0] rsp_demux_010_src0_channel;                                               // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                         // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                           // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                 // rsp_demux_010:src1_valid -> rsp_mux_001:sink10_valid
	wire  [117:0] rsp_demux_010_src1_data;                                                  // rsp_demux_010:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src1_ready;                                                 // rsp_mux_001:sink10_ready -> rsp_demux_010:src1_ready
	wire   [13:0] rsp_demux_010_src1_channel;                                               // rsp_demux_010:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src1_startofpacket;                                         // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                           // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                 // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [117:0] rsp_demux_011_src0_data;                                                  // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                 // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [13:0] rsp_demux_011_src0_channel;                                               // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                         // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                           // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                 // rsp_demux_011:src1_valid -> rsp_mux_001:sink11_valid
	wire  [117:0] rsp_demux_011_src1_data;                                                  // rsp_demux_011:src1_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src1_ready;                                                 // rsp_mux_001:sink11_ready -> rsp_demux_011:src1_ready
	wire   [13:0] rsp_demux_011_src1_channel;                                               // rsp_demux_011:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src1_startofpacket;                                         // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                           // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                 // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [117:0] rsp_demux_012_src0_data;                                                  // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                 // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [13:0] rsp_demux_012_src0_channel;                                               // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                         // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                           // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                                 // rsp_demux_012:src1_valid -> rsp_mux_001:sink12_valid
	wire  [117:0] rsp_demux_012_src1_data;                                                  // rsp_demux_012:src1_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_012_src1_ready;                                                 // rsp_mux_001:sink12_ready -> rsp_demux_012:src1_ready
	wire   [13:0] rsp_demux_012_src1_channel;                                               // rsp_demux_012:src1_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_012_src1_startofpacket;                                         // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                           // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                 // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [117:0] rsp_demux_013_src0_data;                                                  // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                 // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [13:0] rsp_demux_013_src0_channel;                                               // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                         // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                           // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_013_src1_valid;                                                 // rsp_demux_013:src1_valid -> rsp_mux_001:sink13_valid
	wire  [117:0] rsp_demux_013_src1_data;                                                  // rsp_demux_013:src1_data -> rsp_mux_001:sink13_data
	wire          rsp_demux_013_src1_ready;                                                 // rsp_mux_001:sink13_ready -> rsp_demux_013:src1_ready
	wire   [13:0] rsp_demux_013_src1_channel;                                               // rsp_demux_013:src1_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_013_src1_startofpacket;                                         // rsp_demux_013:src1_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                           // rsp_demux_013:src1_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire   [13:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                        // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [13:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                        // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_valid;                      // sysid_qsys_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_out_data;                       // sysid_qsys_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_ready;                      // avalon_st_adapter:in_0_ready -> sysid_qsys_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                            // avalon_st_adapter:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                             // avalon_st_adapter:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                            // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                            // avalon_st_adapter:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire          led_pio_s1_agent_rdata_fifo_out_valid;                                    // led_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] led_pio_s1_agent_rdata_fifo_out_data;                                     // led_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          led_pio_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_001:in_0_ready -> led_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                        // avalon_st_adapter_001:out_0_valid -> led_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                         // avalon_st_adapter_001:out_0_data -> led_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                        // led_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                        // avalon_st_adapter_001:out_0_error -> led_pio_s1_agent:rdata_fifo_sink_error
	wire          dipsw_pio_s1_agent_rdata_fifo_out_valid;                                  // dipsw_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] dipsw_pio_s1_agent_rdata_fifo_out_data;                                   // dipsw_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          dipsw_pio_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_002:in_0_ready -> dipsw_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                        // avalon_st_adapter_002:out_0_valid -> dipsw_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                         // avalon_st_adapter_002:out_0_data -> dipsw_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                        // dipsw_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                        // avalon_st_adapter_002:out_0_error -> dipsw_pio_s1_agent:rdata_fifo_sink_error
	wire          button_pio_s1_agent_rdata_fifo_out_valid;                                 // button_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] button_pio_s1_agent_rdata_fifo_out_data;                                  // button_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          button_pio_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_003:in_0_ready -> button_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                        // avalon_st_adapter_003:out_0_valid -> button_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                         // avalon_st_adapter_003:out_0_data -> button_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                        // button_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                        // avalon_st_adapter_003:out_0_error -> button_pio_s1_agent:rdata_fifo_sink_error
	wire          mosfet_control_s1_agent_rdata_fifo_out_valid;                             // Mosfet_control_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] mosfet_control_s1_agent_rdata_fifo_out_data;                              // Mosfet_control_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          mosfet_control_s1_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_004:in_0_ready -> Mosfet_control_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                        // avalon_st_adapter_004:out_0_valid -> Mosfet_control_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                         // avalon_st_adapter_004:out_0_data -> Mosfet_control_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                        // Mosfet_control_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                        // avalon_st_adapter_004:out_0_error -> Mosfet_control_s1_agent:rdata_fifo_sink_error
	wire          mosfet_en_s1_agent_rdata_fifo_out_valid;                                  // Mosfet_en_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] mosfet_en_s1_agent_rdata_fifo_out_data;                                   // Mosfet_en_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          mosfet_en_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_005:in_0_ready -> Mosfet_en_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                        // avalon_st_adapter_005:out_0_valid -> Mosfet_en_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                         // avalon_st_adapter_005:out_0_data -> Mosfet_en_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                        // Mosfet_en_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                        // avalon_st_adapter_005:out_0_error -> Mosfet_en_s1_agent:rdata_fifo_sink_error
	wire          valves_control_s1_agent_rdata_fifo_out_valid;                             // Valves_control_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] valves_control_s1_agent_rdata_fifo_out_data;                              // Valves_control_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          valves_control_s1_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_006:in_0_ready -> Valves_control_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                        // avalon_st_adapter_006:out_0_valid -> Valves_control_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                         // avalon_st_adapter_006:out_0_data -> Valves_control_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                        // Valves_control_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                        // avalon_st_adapter_006:out_0_error -> Valves_control_s1_agent:rdata_fifo_sink_error
	wire          electro_control_s1_agent_rdata_fifo_out_valid;                            // Electro_control_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] electro_control_s1_agent_rdata_fifo_out_data;                             // Electro_control_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          electro_control_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_007:in_0_ready -> Electro_control_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                        // avalon_st_adapter_007:out_0_valid -> Electro_control_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                         // avalon_st_adapter_007:out_0_data -> Electro_control_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                        // Electro_control_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                        // avalon_st_adapter_007:out_0_error -> Electro_control_s1_agent:rdata_fifo_sink_error
	wire          alarm_div_32_s1_agent_rdata_fifo_out_valid;                               // Alarm_div_32_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] alarm_div_32_s1_agent_rdata_fifo_out_data;                                // Alarm_div_32_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          alarm_div_32_s1_agent_rdata_fifo_out_ready;                               // avalon_st_adapter_008:in_0_ready -> Alarm_div_32_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                        // avalon_st_adapter_008:out_0_valid -> Alarm_div_32_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                         // avalon_st_adapter_008:out_0_data -> Alarm_div_32_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                        // Alarm_div_32_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                        // avalon_st_adapter_008:out_0_error -> Alarm_div_32_s1_agent:rdata_fifo_sink_error
	wire          buttons_inicio_emer_final_control_s1_agent_rdata_fifo_out_valid;          // Buttons_Inicio_Emer_Final_control_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] buttons_inicio_emer_final_control_s1_agent_rdata_fifo_out_data;           // Buttons_Inicio_Emer_Final_control_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          buttons_inicio_emer_final_control_s1_agent_rdata_fifo_out_ready;          // avalon_st_adapter_009:in_0_ready -> Buttons_Inicio_Emer_Final_control_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                        // avalon_st_adapter_009:out_0_valid -> Buttons_Inicio_Emer_Final_control_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                         // avalon_st_adapter_009:out_0_data -> Buttons_Inicio_Emer_Final_control_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                        // Buttons_Inicio_Emer_Final_control_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                        // avalon_st_adapter_009:out_0_error -> Buttons_Inicio_Emer_Final_control_s1_agent:rdata_fifo_sink_error
	wire          max6675_temp_s1_agent_rdata_fifo_out_valid;                               // Max6675_Temp_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] max6675_temp_s1_agent_rdata_fifo_out_data;                                // Max6675_Temp_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          max6675_temp_s1_agent_rdata_fifo_out_ready;                               // avalon_st_adapter_010:in_0_ready -> Max6675_Temp_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                        // avalon_st_adapter_010:out_0_valid -> Max6675_Temp_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                         // avalon_st_adapter_010:out_0_data -> Max6675_Temp_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                        // Max6675_Temp_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                        // avalon_st_adapter_010:out_0_error -> Max6675_Temp_s1_agent:rdata_fifo_sink_error
	wire          sel_max667_s1_agent_rdata_fifo_out_valid;                                 // Sel_Max667_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] sel_max667_s1_agent_rdata_fifo_out_data;                                  // Sel_Max667_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          sel_max667_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_011:in_0_ready -> Sel_Max667_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                        // avalon_st_adapter_011:out_0_valid -> Sel_Max667_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                         // avalon_st_adapter_011:out_0_data -> Sel_Max667_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                        // Sel_Max667_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                        // avalon_st_adapter_011:out_0_error -> Sel_Max667_s1_agent:rdata_fifo_sink_error
	wire          adc_input_data_s1_agent_rdata_fifo_out_valid;                             // ADC_input_data_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] adc_input_data_s1_agent_rdata_fifo_out_data;                              // ADC_input_data_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          adc_input_data_s1_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_012:in_0_ready -> ADC_input_data_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                        // avalon_st_adapter_012:out_0_valid -> ADC_input_data_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                         // avalon_st_adapter_012:out_0_data -> ADC_input_data_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                        // ADC_input_data_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                        // avalon_st_adapter_012:out_0_error -> ADC_input_data_s1_agent:rdata_fifo_sink_error
	wire          adc_sel_channel_s1_agent_rdata_fifo_out_valid;                            // ADC_sel_channel_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] adc_sel_channel_s1_agent_rdata_fifo_out_data;                             // ADC_sel_channel_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          adc_sel_channel_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_013:in_0_ready -> ADC_sel_channel_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                        // avalon_st_adapter_013:out_0_valid -> ADC_sel_channel_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                         // avalon_st_adapter_013:out_0_data -> ADC_sel_channel_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                        // ADC_sel_channel_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                        // avalon_st_adapter_013:out_0_error -> ADC_sel_channel_s1_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_writedata           (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_pio_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (led_pio_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (led_pio_s1_agent_m0_read),                     //                         .read
		.uav_write              (led_pio_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (led_pio_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (led_pio_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (led_pio_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (led_pio_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (led_pio_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (led_pio_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (led_pio_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (led_pio_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (led_pio_s1_write),                             //                         .write
		.av_readdata            (led_pio_s1_readdata),                          //                         .readdata
		.av_writedata           (led_pio_s1_writedata),                         //                         .writedata
		.av_chipselect          (led_pio_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dipsw_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dipsw_pio_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (dipsw_pio_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (dipsw_pio_s1_agent_m0_read),                   //                         .read
		.uav_write              (dipsw_pio_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (dipsw_pio_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (dipsw_pio_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (dipsw_pio_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (dipsw_pio_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (dipsw_pio_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (dipsw_pio_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (dipsw_pio_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (dipsw_pio_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (dipsw_pio_s1_write),                           //                         .write
		.av_readdata            (dipsw_pio_s1_readdata),                        //                         .readdata
		.av_writedata           (dipsw_pio_s1_writedata),                       //                         .writedata
		.av_chipselect          (dipsw_pio_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_pio_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (button_pio_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (button_pio_s1_agent_m0_read),                  //                         .read
		.uav_write              (button_pio_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (button_pio_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (button_pio_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (button_pio_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (button_pio_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (button_pio_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (button_pio_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (button_pio_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (button_pio_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (button_pio_s1_write),                          //                         .write
		.av_readdata            (button_pio_s1_readdata),                       //                         .readdata
		.av_writedata           (button_pio_s1_writedata),                      //                         .writedata
		.av_chipselect          (button_pio_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mosfet_control_s1_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mosfet_control_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (mosfet_control_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (mosfet_control_s1_agent_m0_read),              //                         .read
		.uav_write              (mosfet_control_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (mosfet_control_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (mosfet_control_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (mosfet_control_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (mosfet_control_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (mosfet_control_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (mosfet_control_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (mosfet_control_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (Mosfet_control_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (Mosfet_control_s1_write),                      //                         .write
		.av_readdata            (Mosfet_control_s1_readdata),                   //                         .readdata
		.av_writedata           (Mosfet_control_s1_writedata),                  //                         .writedata
		.av_chipselect          (Mosfet_control_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mosfet_en_s1_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mosfet_en_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (mosfet_en_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (mosfet_en_s1_agent_m0_read),                   //                         .read
		.uav_write              (mosfet_en_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (mosfet_en_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (mosfet_en_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (mosfet_en_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (mosfet_en_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (mosfet_en_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (mosfet_en_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (mosfet_en_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (Mosfet_en_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (Mosfet_en_s1_write),                           //                         .write
		.av_readdata            (Mosfet_en_s1_readdata),                        //                         .readdata
		.av_writedata           (Mosfet_en_s1_writedata),                       //                         .writedata
		.av_chipselect          (Mosfet_en_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) valves_control_s1_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (valves_control_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (valves_control_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (valves_control_s1_agent_m0_read),              //                         .read
		.uav_write              (valves_control_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (valves_control_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (valves_control_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (valves_control_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (valves_control_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (valves_control_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (valves_control_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (valves_control_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (Valves_control_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (Valves_control_s1_write),                      //                         .write
		.av_readdata            (Valves_control_s1_readdata),                   //                         .readdata
		.av_writedata           (Valves_control_s1_writedata),                  //                         .writedata
		.av_chipselect          (Valves_control_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) electro_control_s1_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (electro_control_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (electro_control_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (electro_control_s1_agent_m0_read),             //                         .read
		.uav_write              (electro_control_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (electro_control_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (electro_control_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (electro_control_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (electro_control_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (electro_control_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (electro_control_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (electro_control_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (Electro_control_s1_address),                   //      avalon_anti_slave_0.address
		.av_readdata            (Electro_control_s1_readdata),                  //                         .readdata
		.av_write               (),                                             //              (terminated)
		.av_read                (),                                             //              (terminated)
		.av_writedata           (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alarm_div_32_s1_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (alarm_div_32_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (alarm_div_32_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (alarm_div_32_s1_agent_m0_read),                //                         .read
		.uav_write              (alarm_div_32_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (alarm_div_32_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (alarm_div_32_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (alarm_div_32_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (alarm_div_32_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (alarm_div_32_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (alarm_div_32_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (alarm_div_32_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (Alarm_div_32_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (Alarm_div_32_s1_write),                        //                         .write
		.av_readdata            (Alarm_div_32_s1_readdata),                     //                         .readdata
		.av_writedata           (Alarm_div_32_s1_writedata),                    //                         .writedata
		.av_chipselect          (Alarm_div_32_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) buttons_inicio_emer_final_control_s1_translator (
		.clk                    (clk_0_clk_clk),                                               //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset),                //                    reset.reset
		.uav_address            (buttons_inicio_emer_final_control_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (buttons_inicio_emer_final_control_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (buttons_inicio_emer_final_control_s1_agent_m0_read),          //                         .read
		.uav_write              (buttons_inicio_emer_final_control_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (buttons_inicio_emer_final_control_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (buttons_inicio_emer_final_control_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (buttons_inicio_emer_final_control_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (buttons_inicio_emer_final_control_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (buttons_inicio_emer_final_control_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (buttons_inicio_emer_final_control_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (buttons_inicio_emer_final_control_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Buttons_Inicio_Emer_Final_control_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (Buttons_Inicio_Emer_Final_control_s1_readdata),               //                         .readdata
		.av_write               (),                                                            //              (terminated)
		.av_read                (),                                                            //              (terminated)
		.av_writedata           (),                                                            //              (terminated)
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) max6675_temp_s1_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (max6675_temp_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (max6675_temp_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (max6675_temp_s1_agent_m0_read),                //                         .read
		.uav_write              (max6675_temp_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (max6675_temp_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (max6675_temp_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (max6675_temp_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (max6675_temp_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (max6675_temp_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (max6675_temp_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (max6675_temp_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (Max6675_Temp_s1_address),                      //      avalon_anti_slave_0.address
		.av_readdata            (Max6675_Temp_s1_readdata),                     //                         .readdata
		.av_write               (),                                             //              (terminated)
		.av_read                (),                                             //              (terminated)
		.av_writedata           (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sel_max667_s1_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sel_max667_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sel_max667_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sel_max667_s1_agent_m0_read),                  //                         .read
		.uav_write              (sel_max667_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sel_max667_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sel_max667_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sel_max667_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sel_max667_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sel_max667_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sel_max667_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sel_max667_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (Sel_Max667_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (Sel_Max667_s1_write),                          //                         .write
		.av_readdata            (Sel_Max667_s1_readdata),                       //                         .readdata
		.av_writedata           (Sel_Max667_s1_writedata),                      //                         .writedata
		.av_chipselect          (Sel_Max667_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) adc_input_data_s1_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (adc_input_data_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (adc_input_data_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (adc_input_data_s1_agent_m0_read),              //                         .read
		.uav_write              (adc_input_data_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (adc_input_data_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (adc_input_data_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (adc_input_data_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (adc_input_data_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (adc_input_data_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (adc_input_data_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (adc_input_data_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (ADC_input_data_s1_address),                    //      avalon_anti_slave_0.address
		.av_readdata            (ADC_input_data_s1_readdata),                   //                         .readdata
		.av_write               (),                                             //              (terminated)
		.av_read                (),                                             //              (terminated)
		.av_writedata           (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) adc_sel_channel_s1_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (adc_sel_channel_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (adc_sel_channel_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (adc_sel_channel_s1_agent_m0_read),             //                         .read
		.uav_write              (adc_sel_channel_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (adc_sel_channel_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (adc_sel_channel_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (adc_sel_channel_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (adc_sel_channel_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (adc_sel_channel_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (adc_sel_channel_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (adc_sel_channel_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (ADC_sel_channel_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (ADC_sel_channel_s1_write),                     //                         .write
		.av_readdata            (ADC_sel_channel_s1_readdata),                  //                         .readdata
		.av_writedata           (ADC_sel_channel_s1_writedata),                 //                         .writedata
		.av_chipselect          (ADC_sel_channel_s1_chipselect),                //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (94),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                        //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_qsys_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_qsys_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_qsys_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_qsys_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (led_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (led_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (led_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (led_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (led_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (led_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (led_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (led_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (led_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (led_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (led_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (led_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (led_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (led_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (led_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (led_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (led_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (led_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (led_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (led_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (led_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (led_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (led_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (led_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (led_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (led_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (led_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (led_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (led_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (led_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (led_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (led_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),              //                .error
		.rdata_fifo_src_ready    (led_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (led_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_pio_s1_agent_rf_source_data),              //        in.data
		.in_valid          (led_pio_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (led_pio_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (led_pio_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (led_pio_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (led_pio_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (led_pio_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (led_pio_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (led_pio_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (led_pio_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_pio_s1_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (led_pio_s1_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (led_pio_s1_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (led_pio_s1_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (led_pio_s1_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (led_pio_s1_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dipsw_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (dipsw_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dipsw_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dipsw_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dipsw_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dipsw_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (dipsw_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dipsw_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dipsw_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (dipsw_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dipsw_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (dipsw_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (dipsw_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dipsw_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (dipsw_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (dipsw_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (dipsw_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dipsw_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dipsw_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dipsw_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dipsw_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dipsw_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dipsw_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dipsw_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dipsw_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dipsw_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dipsw_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dipsw_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dipsw_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dipsw_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dipsw_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                //                .error
		.rdata_fifo_src_ready    (dipsw_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dipsw_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dipsw_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dipsw_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (dipsw_pio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dipsw_pio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dipsw_pio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dipsw_pio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dipsw_pio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dipsw_pio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dipsw_pio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dipsw_pio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dipsw_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dipsw_pio_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (dipsw_pio_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (dipsw_pio_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (dipsw_pio_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (dipsw_pio_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (dipsw_pio_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (button_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (button_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (button_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (button_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (button_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (button_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (button_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (button_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (button_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (button_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (button_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (button_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (button_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (button_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (button_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (button_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (button_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (button_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (button_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (button_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (button_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (button_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (button_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (button_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (button_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (button_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (button_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (button_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (button_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (button_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (button_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (button_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (button_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (button_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (button_pio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (button_pio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (button_pio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (button_pio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (button_pio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (button_pio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (button_pio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (button_pio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (button_pio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (button_pio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_pio_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (button_pio_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (button_pio_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (button_pio_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (button_pio_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (button_pio_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mosfet_control_s1_agent (
		.clk                     (clk_0_clk_clk),                                         //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (mosfet_control_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (mosfet_control_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (mosfet_control_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (mosfet_control_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (mosfet_control_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (mosfet_control_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (mosfet_control_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (mosfet_control_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (mosfet_control_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (mosfet_control_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (mosfet_control_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (mosfet_control_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (mosfet_control_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (mosfet_control_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (mosfet_control_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (mosfet_control_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (mosfet_control_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (mosfet_control_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (mosfet_control_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (mosfet_control_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (mosfet_control_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (mosfet_control_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (mosfet_control_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (mosfet_control_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (mosfet_control_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (mosfet_control_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (mosfet_control_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (mosfet_control_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (mosfet_control_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (mosfet_control_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (mosfet_control_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (mosfet_control_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (mosfet_control_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mosfet_control_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (mosfet_control_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mosfet_control_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (mosfet_control_s1_agent_rf_source_data),             //        in.data
		.in_valid          (mosfet_control_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (mosfet_control_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mosfet_control_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mosfet_control_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mosfet_control_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mosfet_control_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mosfet_control_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mosfet_control_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mosfet_control_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mosfet_control_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mosfet_control_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (mosfet_control_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (mosfet_control_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (mosfet_control_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (mosfet_control_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (mosfet_control_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mosfet_en_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (mosfet_en_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (mosfet_en_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (mosfet_en_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (mosfet_en_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (mosfet_en_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (mosfet_en_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (mosfet_en_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (mosfet_en_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (mosfet_en_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (mosfet_en_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (mosfet_en_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (mosfet_en_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (mosfet_en_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (mosfet_en_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (mosfet_en_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (mosfet_en_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (mosfet_en_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (mosfet_en_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (mosfet_en_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (mosfet_en_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (mosfet_en_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (mosfet_en_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (mosfet_en_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (mosfet_en_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (mosfet_en_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (mosfet_en_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (mosfet_en_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (mosfet_en_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (mosfet_en_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (mosfet_en_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (mosfet_en_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (mosfet_en_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                //                .error
		.rdata_fifo_src_ready    (mosfet_en_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mosfet_en_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (mosfet_en_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mosfet_en_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (mosfet_en_s1_agent_rf_source_data),             //        in.data
		.in_valid          (mosfet_en_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (mosfet_en_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mosfet_en_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mosfet_en_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mosfet_en_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mosfet_en_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mosfet_en_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mosfet_en_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mosfet_en_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mosfet_en_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mosfet_en_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (mosfet_en_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (mosfet_en_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (mosfet_en_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (mosfet_en_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (mosfet_en_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) valves_control_s1_agent (
		.clk                     (clk_0_clk_clk),                                         //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (valves_control_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (valves_control_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (valves_control_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (valves_control_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (valves_control_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (valves_control_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (valves_control_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (valves_control_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (valves_control_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (valves_control_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (valves_control_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (valves_control_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (valves_control_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (valves_control_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (valves_control_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (valves_control_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (valves_control_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (valves_control_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (valves_control_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (valves_control_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (valves_control_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (valves_control_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (valves_control_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (valves_control_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (valves_control_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (valves_control_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (valves_control_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (valves_control_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (valves_control_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (valves_control_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (valves_control_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (valves_control_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (valves_control_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (valves_control_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (valves_control_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) valves_control_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (valves_control_s1_agent_rf_source_data),             //        in.data
		.in_valid          (valves_control_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (valves_control_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (valves_control_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (valves_control_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (valves_control_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (valves_control_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (valves_control_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (valves_control_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (valves_control_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) valves_control_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (valves_control_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (valves_control_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (valves_control_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (valves_control_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (valves_control_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (valves_control_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) electro_control_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (electro_control_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (electro_control_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (electro_control_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (electro_control_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (electro_control_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (electro_control_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (electro_control_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (electro_control_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (electro_control_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (electro_control_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (electro_control_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (electro_control_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (electro_control_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (electro_control_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (electro_control_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (electro_control_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (electro_control_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (electro_control_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (electro_control_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (electro_control_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (electro_control_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (electro_control_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (electro_control_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (electro_control_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (electro_control_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (electro_control_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (electro_control_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (electro_control_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (electro_control_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (electro_control_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (electro_control_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (electro_control_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (electro_control_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (electro_control_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (electro_control_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) electro_control_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (electro_control_s1_agent_rf_source_data),             //        in.data
		.in_valid          (electro_control_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (electro_control_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (electro_control_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (electro_control_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (electro_control_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (electro_control_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (electro_control_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (electro_control_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (electro_control_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) electro_control_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (electro_control_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (electro_control_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (electro_control_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (electro_control_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (electro_control_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (electro_control_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) alarm_div_32_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (alarm_div_32_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (alarm_div_32_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (alarm_div_32_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (alarm_div_32_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (alarm_div_32_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (alarm_div_32_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (alarm_div_32_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (alarm_div_32_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (alarm_div_32_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (alarm_div_32_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (alarm_div_32_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (alarm_div_32_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (alarm_div_32_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (alarm_div_32_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (alarm_div_32_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (alarm_div_32_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (alarm_div_32_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (alarm_div_32_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (alarm_div_32_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (alarm_div_32_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (alarm_div_32_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (alarm_div_32_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (alarm_div_32_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (alarm_div_32_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (alarm_div_32_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (alarm_div_32_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (alarm_div_32_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (alarm_div_32_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (alarm_div_32_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (alarm_div_32_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (alarm_div_32_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (alarm_div_32_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (alarm_div_32_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alarm_div_32_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (alarm_div_32_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alarm_div_32_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (alarm_div_32_s1_agent_rf_source_data),             //        in.data
		.in_valid          (alarm_div_32_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (alarm_div_32_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alarm_div_32_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alarm_div_32_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alarm_div_32_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alarm_div_32_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alarm_div_32_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alarm_div_32_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alarm_div_32_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alarm_div_32_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (alarm_div_32_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (alarm_div_32_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (alarm_div_32_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (alarm_div_32_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (alarm_div_32_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (alarm_div_32_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) buttons_inicio_emer_final_control_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),                             //       clk_reset.reset
		.m0_address              (buttons_inicio_emer_final_control_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (buttons_inicio_emer_final_control_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (buttons_inicio_emer_final_control_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (buttons_inicio_emer_final_control_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (buttons_inicio_emer_final_control_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (buttons_inicio_emer_final_control_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (buttons_inicio_emer_final_control_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (buttons_inicio_emer_final_control_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (buttons_inicio_emer_final_control_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (buttons_inicio_emer_final_control_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (buttons_inicio_emer_final_control_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (buttons_inicio_emer_final_control_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (buttons_inicio_emer_final_control_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (buttons_inicio_emer_final_control_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (buttons_inicio_emer_final_control_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (buttons_inicio_emer_final_control_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (buttons_inicio_emer_final_control_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (buttons_inicio_emer_final_control_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (buttons_inicio_emer_final_control_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (buttons_inicio_emer_final_control_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (buttons_inicio_emer_final_control_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (buttons_inicio_emer_final_control_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (buttons_inicio_emer_final_control_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (buttons_inicio_emer_final_control_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (buttons_inicio_emer_final_control_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (buttons_inicio_emer_final_control_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (buttons_inicio_emer_final_control_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (buttons_inicio_emer_final_control_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (buttons_inicio_emer_final_control_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (buttons_inicio_emer_final_control_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) buttons_inicio_emer_final_control_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (buttons_inicio_emer_final_control_s1_agent_rf_source_data),             //        in.data
		.in_valid          (buttons_inicio_emer_final_control_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (buttons_inicio_emer_final_control_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (buttons_inicio_emer_final_control_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (buttons_inicio_emer_final_control_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (buttons_inicio_emer_final_control_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) buttons_inicio_emer_final_control_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (buttons_inicio_emer_final_control_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (buttons_inicio_emer_final_control_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (buttons_inicio_emer_final_control_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (buttons_inicio_emer_final_control_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (buttons_inicio_emer_final_control_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (buttons_inicio_emer_final_control_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) max6675_temp_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (max6675_temp_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (max6675_temp_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (max6675_temp_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (max6675_temp_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (max6675_temp_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (max6675_temp_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (max6675_temp_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (max6675_temp_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (max6675_temp_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (max6675_temp_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (max6675_temp_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (max6675_temp_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (max6675_temp_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (max6675_temp_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (max6675_temp_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (max6675_temp_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (max6675_temp_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (max6675_temp_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (max6675_temp_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (max6675_temp_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (max6675_temp_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (max6675_temp_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (max6675_temp_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (max6675_temp_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (max6675_temp_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (max6675_temp_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (max6675_temp_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (max6675_temp_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (max6675_temp_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (max6675_temp_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (max6675_temp_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (max6675_temp_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (max6675_temp_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (max6675_temp_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (max6675_temp_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) max6675_temp_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (max6675_temp_s1_agent_rf_source_data),             //        in.data
		.in_valid          (max6675_temp_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (max6675_temp_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (max6675_temp_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (max6675_temp_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (max6675_temp_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (max6675_temp_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (max6675_temp_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (max6675_temp_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (max6675_temp_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) max6675_temp_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (max6675_temp_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (max6675_temp_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (max6675_temp_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (max6675_temp_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (max6675_temp_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (max6675_temp_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sel_max667_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sel_max667_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sel_max667_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sel_max667_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sel_max667_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sel_max667_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sel_max667_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sel_max667_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sel_max667_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sel_max667_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sel_max667_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sel_max667_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sel_max667_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sel_max667_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sel_max667_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sel_max667_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sel_max667_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sel_max667_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sel_max667_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sel_max667_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sel_max667_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sel_max667_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sel_max667_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sel_max667_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sel_max667_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sel_max667_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sel_max667_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sel_max667_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sel_max667_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sel_max667_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sel_max667_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sel_max667_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sel_max667_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (sel_max667_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sel_max667_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sel_max667_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sel_max667_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sel_max667_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sel_max667_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sel_max667_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sel_max667_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sel_max667_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sel_max667_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sel_max667_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sel_max667_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sel_max667_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sel_max667_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sel_max667_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sel_max667_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sel_max667_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sel_max667_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sel_max667_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sel_max667_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sel_max667_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) adc_input_data_s1_agent (
		.clk                     (clk_0_clk_clk),                                         //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (adc_input_data_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (adc_input_data_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (adc_input_data_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (adc_input_data_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (adc_input_data_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (adc_input_data_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (adc_input_data_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (adc_input_data_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (adc_input_data_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (adc_input_data_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (adc_input_data_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (adc_input_data_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (adc_input_data_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (adc_input_data_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (adc_input_data_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (adc_input_data_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (adc_input_data_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (adc_input_data_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (adc_input_data_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (adc_input_data_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (adc_input_data_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (adc_input_data_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (adc_input_data_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (adc_input_data_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (adc_input_data_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (adc_input_data_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (adc_input_data_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (adc_input_data_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (adc_input_data_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (adc_input_data_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (adc_input_data_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (adc_input_data_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (adc_input_data_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (adc_input_data_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (adc_input_data_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_input_data_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (adc_input_data_s1_agent_rf_source_data),             //        in.data
		.in_valid          (adc_input_data_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (adc_input_data_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (adc_input_data_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (adc_input_data_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (adc_input_data_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (adc_input_data_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (adc_input_data_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (adc_input_data_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (adc_input_data_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_input_data_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (adc_input_data_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (adc_input_data_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (adc_input_data_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (adc_input_data_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (adc_input_data_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (adc_input_data_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) adc_sel_channel_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (adc_sel_channel_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (adc_sel_channel_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (adc_sel_channel_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (adc_sel_channel_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (adc_sel_channel_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (adc_sel_channel_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (adc_sel_channel_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (adc_sel_channel_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (adc_sel_channel_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (adc_sel_channel_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (adc_sel_channel_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (adc_sel_channel_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (adc_sel_channel_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (adc_sel_channel_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (adc_sel_channel_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (adc_sel_channel_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (adc_sel_channel_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (adc_sel_channel_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (adc_sel_channel_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (adc_sel_channel_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (adc_sel_channel_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (adc_sel_channel_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (adc_sel_channel_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (adc_sel_channel_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (adc_sel_channel_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (adc_sel_channel_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (adc_sel_channel_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (adc_sel_channel_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (adc_sel_channel_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (adc_sel_channel_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (adc_sel_channel_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (adc_sel_channel_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (adc_sel_channel_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (adc_sel_channel_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (adc_sel_channel_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_sel_channel_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (adc_sel_channel_s1_agent_rf_source_data),             //        in.data
		.in_valid          (adc_sel_channel_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (adc_sel_channel_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (adc_sel_channel_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (adc_sel_channel_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (adc_sel_channel_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (adc_sel_channel_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (adc_sel_channel_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (adc_sel_channel_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (adc_sel_channel_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_sel_channel_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (adc_sel_channel_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (adc_sel_channel_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (adc_sel_channel_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (adc_sel_channel_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (adc_sel_channel_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (adc_sel_channel_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	soc_system_mm_interconnect_1_router router (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                    //       src.ready
		.src_valid          (router_src_valid),                                                    //          .valid
		.src_data           (router_src_data),                                                     //          .data
		.src_channel        (router_src_channel),                                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //          .endofpacket
	);

	soc_system_mm_interconnect_1_router router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_002_src_ready),                            //       src.ready
		.src_valid          (router_002_src_valid),                            //          .valid
		.src_data           (router_002_src_data),                             //          .data
		.src_channel        (router_002_src_channel),                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_003 (
		.sink_ready         (led_pio_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (led_pio_s1_agent_rp_valid),                    //          .valid
		.sink_data          (led_pio_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (led_pio_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (led_pio_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                         //       src.ready
		.src_valid          (router_003_src_valid),                         //          .valid
		.src_data           (router_003_src_data),                          //          .data
		.src_channel        (router_003_src_channel),                       //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_004 (
		.sink_ready         (dipsw_pio_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (dipsw_pio_s1_agent_rp_valid),                  //          .valid
		.sink_data          (dipsw_pio_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (dipsw_pio_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (dipsw_pio_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                         //       src.ready
		.src_valid          (router_004_src_valid),                         //          .valid
		.src_data           (router_004_src_data),                          //          .data
		.src_channel        (router_004_src_channel),                       //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_005 (
		.sink_ready         (button_pio_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (button_pio_s1_agent_rp_valid),                 //          .valid
		.sink_data          (button_pio_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (button_pio_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (button_pio_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                         //       src.ready
		.src_valid          (router_005_src_valid),                         //          .valid
		.src_data           (router_005_src_data),                          //          .data
		.src_channel        (router_005_src_channel),                       //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_006 (
		.sink_ready         (mosfet_control_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (mosfet_control_s1_agent_rp_valid),             //          .valid
		.sink_data          (mosfet_control_s1_agent_rp_data),              //          .data
		.sink_startofpacket (mosfet_control_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (mosfet_control_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                         //       src.ready
		.src_valid          (router_006_src_valid),                         //          .valid
		.src_data           (router_006_src_data),                          //          .data
		.src_channel        (router_006_src_channel),                       //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_007 (
		.sink_ready         (mosfet_en_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (mosfet_en_s1_agent_rp_valid),                  //          .valid
		.sink_data          (mosfet_en_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (mosfet_en_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (mosfet_en_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                         //       src.ready
		.src_valid          (router_007_src_valid),                         //          .valid
		.src_data           (router_007_src_data),                          //          .data
		.src_channel        (router_007_src_channel),                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_008 (
		.sink_ready         (valves_control_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (valves_control_s1_agent_rp_valid),             //          .valid
		.sink_data          (valves_control_s1_agent_rp_data),              //          .data
		.sink_startofpacket (valves_control_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (valves_control_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                         //       src.ready
		.src_valid          (router_008_src_valid),                         //          .valid
		.src_data           (router_008_src_data),                          //          .data
		.src_channel        (router_008_src_channel),                       //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_009 (
		.sink_ready         (electro_control_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (electro_control_s1_agent_rp_valid),            //          .valid
		.sink_data          (electro_control_s1_agent_rp_data),             //          .data
		.sink_startofpacket (electro_control_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (electro_control_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                         //       src.ready
		.src_valid          (router_009_src_valid),                         //          .valid
		.src_data           (router_009_src_data),                          //          .data
		.src_channel        (router_009_src_channel),                       //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_010 (
		.sink_ready         (alarm_div_32_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (alarm_div_32_s1_agent_rp_valid),               //          .valid
		.sink_data          (alarm_div_32_s1_agent_rp_data),                //          .data
		.sink_startofpacket (alarm_div_32_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (alarm_div_32_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                         //       src.ready
		.src_valid          (router_010_src_valid),                         //          .valid
		.src_data           (router_010_src_data),                          //          .data
		.src_channel        (router_010_src_channel),                       //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_011 (
		.sink_ready         (buttons_inicio_emer_final_control_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (buttons_inicio_emer_final_control_s1_agent_rp_valid),         //          .valid
		.sink_data          (buttons_inicio_emer_final_control_s1_agent_rp_data),          //          .data
		.sink_startofpacket (buttons_inicio_emer_final_control_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (buttons_inicio_emer_final_control_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_011_src_ready),                                        //       src.ready
		.src_valid          (router_011_src_valid),                                        //          .valid
		.src_data           (router_011_src_data),                                         //          .data
		.src_channel        (router_011_src_channel),                                      //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_012 (
		.sink_ready         (max6675_temp_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (max6675_temp_s1_agent_rp_valid),               //          .valid
		.sink_data          (max6675_temp_s1_agent_rp_data),                //          .data
		.sink_startofpacket (max6675_temp_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (max6675_temp_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                         //       src.ready
		.src_valid          (router_012_src_valid),                         //          .valid
		.src_data           (router_012_src_data),                          //          .data
		.src_channel        (router_012_src_channel),                       //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_013 (
		.sink_ready         (sel_max667_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sel_max667_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sel_max667_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sel_max667_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sel_max667_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                         //       src.ready
		.src_valid          (router_013_src_valid),                         //          .valid
		.src_data           (router_013_src_data),                          //          .data
		.src_channel        (router_013_src_channel),                       //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_014 (
		.sink_ready         (adc_input_data_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (adc_input_data_s1_agent_rp_valid),             //          .valid
		.sink_data          (adc_input_data_s1_agent_rp_data),              //          .data
		.sink_startofpacket (adc_input_data_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (adc_input_data_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                         //       src.ready
		.src_valid          (router_014_src_valid),                         //          .valid
		.src_data           (router_014_src_data),                          //          .data
		.src_channel        (router_014_src_channel),                       //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_015 (
		.sink_ready         (adc_sel_channel_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (adc_sel_channel_s1_agent_rp_valid),            //          .valid
		.sink_data          (adc_sel_channel_s1_agent_rp_data),             //          .data
		.sink_startofpacket (adc_sel_channel_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (adc_sel_channel_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                         //       src.ready
		.src_valid          (router_015_src_valid),                         //          .valid
		.src_data           (router_015_src_data),                          //          .data
		.src_channel        (router_015_src_channel),                       //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.VALID_WIDTH               (14),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                    //          .valid
		.cmd_sink_data          (router_src_data),                                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                              //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.VALID_WIDTH               (14),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_qsys_control_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                            //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                             //          .data
		.sink0_channel         (cmd_mux_src_channel),                                          //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                      //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                            //          .ready
		.source0_valid         (sysid_qsys_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_qsys_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_qsys_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_qsys_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) led_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                  //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                           //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                          //          .ready
		.source0_valid         (led_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (led_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (led_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (led_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (led_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (led_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dipsw_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                             //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                            //          .ready
		.source0_valid         (dipsw_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dipsw_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (dipsw_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dipsw_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dipsw_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dipsw_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) button_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                     //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                              //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                             //          .ready
		.source0_valid         (button_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (button_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (button_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (button_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (button_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (button_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) mosfet_control_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                         //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                 //          .ready
		.source0_valid         (mosfet_control_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (mosfet_control_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (mosfet_control_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (mosfet_control_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (mosfet_control_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (mosfet_control_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) mosfet_en_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                             //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                            //          .ready
		.source0_valid         (mosfet_en_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (mosfet_en_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (mosfet_en_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (mosfet_en_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (mosfet_en_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (mosfet_en_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) valves_control_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                         //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                 //          .ready
		.source0_valid         (valves_control_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (valves_control_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (valves_control_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (valves_control_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (valves_control_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (valves_control_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) electro_control_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                          //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                  //          .ready
		.source0_valid         (electro_control_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (electro_control_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (electro_control_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (electro_control_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (electro_control_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (electro_control_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) alarm_div_32_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                               //          .ready
		.source0_valid         (alarm_div_32_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (alarm_div_32_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (alarm_div_32_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (alarm_div_32_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (alarm_div_32_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (alarm_div_32_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) buttons_inicio_emer_final_control_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),                             // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                                                    //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                                     //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                                                  //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                                              //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                                                    //          .ready
		.source0_valid         (buttons_inicio_emer_final_control_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (buttons_inicio_emer_final_control_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (buttons_inicio_emer_final_control_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (buttons_inicio_emer_final_control_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (buttons_inicio_emer_final_control_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (buttons_inicio_emer_final_control_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) max6675_temp_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                                //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                               //          .ready
		.source0_valid         (max6675_temp_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (max6675_temp_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (max6675_temp_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (max6675_temp_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (max6675_temp_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (max6675_temp_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sel_max667_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                     //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                              //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                             //          .ready
		.source0_valid         (sel_max667_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sel_max667_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sel_max667_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sel_max667_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sel_max667_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sel_max667_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) adc_input_data_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                         //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                                 //          .ready
		.source0_valid         (adc_input_data_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (adc_input_data_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (adc_input_data_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (adc_input_data_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (adc_input_data_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (adc_input_data_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (14),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) adc_sel_channel_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                          //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_013_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                                  //          .ready
		.source0_valid         (adc_sel_channel_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (adc_sel_channel_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (adc_sel_channel_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (adc_sel_channel_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (adc_sel_channel_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (adc_sel_channel_s1_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                                       //        clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                                //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                                //           .valid
		.src0_data           (cmd_demux_src0_data),                                                 //           .data
		.src0_channel        (cmd_demux_src0_channel),                                              //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                        //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                          //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                                //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                                //           .valid
		.src1_data           (cmd_demux_src1_data),                                                 //           .data
		.src1_channel        (cmd_demux_src1_channel),                                              //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                        //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                          //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                                //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                                //           .valid
		.src2_data           (cmd_demux_src2_data),                                                 //           .data
		.src2_channel        (cmd_demux_src2_channel),                                              //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                        //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                          //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                                //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                                //           .valid
		.src3_data           (cmd_demux_src3_data),                                                 //           .data
		.src3_channel        (cmd_demux_src3_channel),                                              //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                        //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                          //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                                //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                                //           .valid
		.src4_data           (cmd_demux_src4_data),                                                 //           .data
		.src4_channel        (cmd_demux_src4_channel),                                              //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                        //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                          //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                                //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                                //           .valid
		.src5_data           (cmd_demux_src5_data),                                                 //           .data
		.src5_channel        (cmd_demux_src5_channel),                                              //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                        //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                          //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                                //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                                //           .valid
		.src6_data           (cmd_demux_src6_data),                                                 //           .data
		.src6_channel        (cmd_demux_src6_channel),                                              //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                        //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                          //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                                //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                                //           .valid
		.src7_data           (cmd_demux_src7_data),                                                 //           .data
		.src7_channel        (cmd_demux_src7_channel),                                              //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                        //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                          //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                                //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                                //           .valid
		.src8_data           (cmd_demux_src8_data),                                                 //           .data
		.src8_channel        (cmd_demux_src8_channel),                                              //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                        //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                          //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                                //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                                //           .valid
		.src9_data           (cmd_demux_src9_data),                                                 //           .data
		.src9_channel        (cmd_demux_src9_channel),                                              //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                        //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                          //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                               //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                               //           .valid
		.src10_data          (cmd_demux_src10_data),                                                //           .data
		.src10_channel       (cmd_demux_src10_channel),                                             //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                       //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                         //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                               //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                               //           .valid
		.src11_data          (cmd_demux_src11_data),                                                //           .data
		.src11_channel       (cmd_demux_src11_channel),                                             //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                       //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                                         //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                               //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                               //           .valid
		.src12_data          (cmd_demux_src12_data),                                                //           .data
		.src12_channel       (cmd_demux_src12_channel),                                             //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                                       //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                                         //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                               //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                               //           .valid
		.src13_data          (cmd_demux_src13_data),                                                //           .data
		.src13_channel       (cmd_demux_src13_channel),                                             //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                                       //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket)                                          //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                 (clk_0_clk_clk),                                                       //        clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                            //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                            //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                             //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                          //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                                      //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                            //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                            //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                             //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                          //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                                      //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                            //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                            //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                             //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                          //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                                      //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                            //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                            //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                             //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                          //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                                      //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                            //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                            //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                             //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                          //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                                      //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                            //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                            //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                             //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                          //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                                      //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                            //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                            //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                             //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                          //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                                    //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                                      //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                            //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                            //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                             //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                          //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                                    //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                                      //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                            //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                            //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                             //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                          //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                                    //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                                      //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                            //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                            //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                             //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                          //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                                    //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                                      //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                           //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                           //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                            //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                         //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                                   //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                                     //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                           //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                           //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                            //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                                         //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                                   //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                                     //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                                           //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                                           //           .valid
		.src12_data          (cmd_demux_001_src12_data),                                            //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                                         //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                                   //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                                     //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                                           //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                                           //           .valid
		.src13_data          (cmd_demux_001_src13_data),                                            //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                                         //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                                   //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket)                                      //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                            //          .valid
		.src_data            (cmd_mux_src_data),                             //          .data
		.src_channel         (cmd_mux_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                       //          .channel
		.sink0_data          (cmd_demux_src0_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                        //          .valid
		.src_data            (cmd_mux_001_src_data),                         //          .data
		.src_channel         (cmd_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                       //          .channel
		.sink0_data          (cmd_demux_src1_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                        //          .valid
		.src_data            (cmd_mux_002_src_data),                         //          .data
		.src_channel         (cmd_mux_002_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                       //          .channel
		.sink0_data          (cmd_demux_src2_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                        //          .valid
		.src_data            (cmd_mux_003_src_data),                         //          .data
		.src_channel         (cmd_mux_003_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                       //          .channel
		.sink0_data          (cmd_demux_src3_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                        //          .valid
		.src_data            (cmd_mux_004_src_data),                         //          .data
		.src_channel         (cmd_mux_004_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                       //          .channel
		.sink0_data          (cmd_demux_src4_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                        //          .valid
		.src_data            (cmd_mux_005_src_data),                         //          .data
		.src_channel         (cmd_mux_005_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                       //          .channel
		.sink0_data          (cmd_demux_src5_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                        //          .valid
		.src_data            (cmd_mux_006_src_data),                         //          .data
		.src_channel         (cmd_mux_006_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                       //          .channel
		.sink0_data          (cmd_demux_src6_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                        //          .valid
		.src_data            (cmd_mux_007_src_data),                         //          .data
		.src_channel         (cmd_mux_007_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                       //          .channel
		.sink0_data          (cmd_demux_src7_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                        //          .valid
		.src_data            (cmd_mux_008_src_data),                         //          .data
		.src_channel         (cmd_mux_008_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                       //          .channel
		.sink0_data          (cmd_demux_src8_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                        //          .valid
		.src_data            (cmd_mux_009_src_data),                         //          .data
		.src_channel         (cmd_mux_009_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                       //          .channel
		.sink0_data          (cmd_demux_src9_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                        //          .valid
		.src_data            (cmd_mux_010_src_data),                         //          .data
		.src_channel         (cmd_mux_010_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                      //          .channel
		.sink0_data          (cmd_demux_src10_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                        //          .valid
		.src_data            (cmd_mux_011_src_data),                         //          .data
		.src_channel         (cmd_mux_011_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                      //          .channel
		.sink0_data          (cmd_demux_src11_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src11_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                        //          .valid
		.src_data            (cmd_mux_012_src_data),                         //          .data
		.src_channel         (cmd_mux_012_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                      //          .channel
		.sink0_data          (cmd_demux_src12_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src12_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src12_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src12_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src12_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src12_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src12_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                        //          .valid
		.src_data            (cmd_mux_013_src_data),                         //          .data
		.src_channel         (cmd_mux_013_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                      //          .channel
		.sink0_data          (cmd_demux_src13_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src13_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src13_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src13_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src13_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src13_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src13_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                         //      sink.ready
		.sink_channel       (router_002_src_channel),                       //          .channel
		.sink_data          (router_002_src_data),                          //          .data
		.sink_startofpacket (router_002_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_002_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_src0_data),                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_src1_data),                          //          .data
		.src1_channel       (rsp_demux_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                         //      sink.ready
		.sink_channel       (router_003_src_channel),                       //          .channel
		.sink_data          (router_003_src_data),                          //          .data
		.sink_startofpacket (router_003_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_003_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_001_src0_data),                      //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_001_src1_data),                      //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                         //      sink.ready
		.sink_channel       (router_004_src_channel),                       //          .channel
		.sink_data          (router_004_src_data),                          //          .data
		.sink_startofpacket (router_004_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_004_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_002_src0_data),                      //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_002_src1_data),                      //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                         //      sink.ready
		.sink_channel       (router_005_src_channel),                       //          .channel
		.sink_data          (router_005_src_data),                          //          .data
		.sink_startofpacket (router_005_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_005_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_003_src0_data),                      //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_003_src1_data),                      //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                         //      sink.ready
		.sink_channel       (router_006_src_channel),                       //          .channel
		.sink_data          (router_006_src_data),                          //          .data
		.sink_startofpacket (router_006_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_006_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_004_src0_data),                      //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_004_src1_data),                      //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                         //      sink.ready
		.sink_channel       (router_007_src_channel),                       //          .channel
		.sink_data          (router_007_src_data),                          //          .data
		.sink_startofpacket (router_007_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_007_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_005_src0_data),                      //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_005_src1_data),                      //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                         //      sink.ready
		.sink_channel       (router_008_src_channel),                       //          .channel
		.sink_data          (router_008_src_data),                          //          .data
		.sink_startofpacket (router_008_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_008_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_006_src0_data),                      //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_006_src1_data),                      //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                         //      sink.ready
		.sink_channel       (router_009_src_channel),                       //          .channel
		.sink_data          (router_009_src_data),                          //          .data
		.sink_startofpacket (router_009_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_009_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_007_src0_data),                      //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_007_src1_data),                      //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                         //      sink.ready
		.sink_channel       (router_010_src_channel),                       //          .channel
		.sink_data          (router_010_src_data),                          //          .data
		.sink_startofpacket (router_010_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_010_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_008_src0_data),                      //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_008_src1_data),                      //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                         //      sink.ready
		.sink_channel       (router_011_src_channel),                       //          .channel
		.sink_data          (router_011_src_data),                          //          .data
		.sink_startofpacket (router_011_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_011_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_009_src0_data),                      //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_009_src1_data),                      //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                         //      sink.ready
		.sink_channel       (router_012_src_channel),                       //          .channel
		.sink_data          (router_012_src_data),                          //          .data
		.sink_startofpacket (router_012_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_012_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_010_src0_data),                      //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_010_src1_data),                      //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                         //      sink.ready
		.sink_channel       (router_013_src_channel),                       //          .channel
		.sink_data          (router_013_src_data),                          //          .data
		.sink_startofpacket (router_013_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_013_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_011_src0_data),                      //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_011_src1_data),                      //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_012 (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                         //      sink.ready
		.sink_channel       (router_014_src_channel),                       //          .channel
		.sink_data          (router_014_src_data),                          //          .data
		.sink_startofpacket (router_014_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_014_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_012_src0_data),                      //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_012_src1_data),                      //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_013 (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                         //      sink.ready
		.sink_channel       (router_015_src_channel),                       //          .channel
		.sink_data          (router_015_src_data),                          //          .data
		.sink_startofpacket (router_015_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_015_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_013_src0_data),                      //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_013_src1_data),                      //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                                       //       clk.clk
		.reset                (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                   //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                   //          .valid
		.src_data             (rsp_mux_src_data),                                                    //          .data
		.src_channel          (rsp_mux_src_channel),                                                 //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                                //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                                //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                              //          .channel
		.sink0_data           (rsp_demux_src0_data),                                                 //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                          //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                            //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                            //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                          //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                             //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                      //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                            //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                            //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                          //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                             //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                      //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                            //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                            //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                          //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                             //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                      //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                            //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                            //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                          //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                             //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                      //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                            //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                            //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                          //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                             //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                      //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                            //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                            //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                          //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                             //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                      //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                            //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                            //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                          //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                             //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                      //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                            //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                            //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                          //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                             //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                      //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                            //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                            //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                          //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                             //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                      //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                            //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                            //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                          //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                             //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                      //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                            //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                            //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                          //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                             //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                    //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                      //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                            //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                            //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                          //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                             //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                    //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                                      //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                            //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                            //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                                          //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                             //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                                    //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                  (clk_0_clk_clk),                                                       //       clk.clk
		.reset                (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                               //          .valid
		.src_data             (rsp_mux_001_src_data),                                                //          .data
		.src_channel          (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                                                //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                                                //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                                              //          .channel
		.sink0_data           (rsp_demux_src1_data),                                                 //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                                          //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                                            //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                                            //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),                                          //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                                             //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),                                      //          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                                            //     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                                            //          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),                                          //          .channel
		.sink2_data           (rsp_demux_002_src1_data),                                             //          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),                                      //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                                            //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                                            //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                                          //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                                             //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                                      //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                                            //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                                            //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                                          //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                                             //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                                      //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                                            //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                                            //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),                                          //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                                             //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),                                      //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                                            //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                                            //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                                          //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                                             //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                                      //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                                            //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                                            //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),                                          //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                                             //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),                                      //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                                            //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                                            //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                                          //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                                             //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                                      //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                                            //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                                            //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                                          //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                                             //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                                      //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                                            //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                                            //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                                          //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                                             //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket),                                      //          .endofpacket
		.sink11_ready         (rsp_demux_011_src1_ready),                                            //    sink11.ready
		.sink11_valid         (rsp_demux_011_src1_valid),                                            //          .valid
		.sink11_channel       (rsp_demux_011_src1_channel),                                          //          .channel
		.sink11_data          (rsp_demux_011_src1_data),                                             //          .data
		.sink11_startofpacket (rsp_demux_011_src1_startofpacket),                                    //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src1_endofpacket),                                      //          .endofpacket
		.sink12_ready         (rsp_demux_012_src1_ready),                                            //    sink12.ready
		.sink12_valid         (rsp_demux_012_src1_valid),                                            //          .valid
		.sink12_channel       (rsp_demux_012_src1_channel),                                          //          .channel
		.sink12_data          (rsp_demux_012_src1_data),                                             //          .data
		.sink12_startofpacket (rsp_demux_012_src1_startofpacket),                                    //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src1_endofpacket),                                      //          .endofpacket
		.sink13_ready         (rsp_demux_013_src1_ready),                                            //    sink13.ready
		.sink13_valid         (rsp_demux_013_src1_valid),                                            //          .valid
		.sink13_channel       (rsp_demux_013_src1_channel),                                          //          .channel
		.sink13_data          (rsp_demux_013_src1_data),                                             //          .data
		.sink13_startofpacket (rsp_demux_013_src1_startofpacket),                                    //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src1_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                        //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_pio_s1_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (led_pio_s1_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (led_pio_s1_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)             //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dipsw_pio_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (dipsw_pio_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (dipsw_pio_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)             //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_pio_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (button_pio_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (button_pio_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)             //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mosfet_control_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (mosfet_control_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (mosfet_control_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)             //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mosfet_en_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (mosfet_en_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (mosfet_en_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)             //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (valves_control_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (valves_control_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (valves_control_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)             //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (electro_control_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (electro_control_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (electro_control_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (alarm_div_32_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (alarm_div_32_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (alarm_div_32_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)             //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset),                    // in_rst_0.reset
		.in_0_data      (buttons_inicio_emer_final_control_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (buttons_inicio_emer_final_control_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (buttons_inicio_emer_final_control_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                                //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (max6675_temp_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (max6675_temp_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (max6675_temp_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)             //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sel_max667_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sel_max667_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sel_max667_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)             //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_0_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (adc_input_data_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (adc_input_data_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (adc_input_data_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)             //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (adc_sel_channel_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (adc_sel_channel_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (adc_sel_channel_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)              //         .error
	);

endmodule
